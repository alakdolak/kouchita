<?phpnamespace App\Http\Controllers;use App\models\Activity;use App\models\Adab;use App\models\Amaken;use App\models\Cities;use App\models\Comment;use App\models\ConfigModel;use App\models\CountryCode;use App\models\DefaultPic;use App\models\Hotel;use App\models\HotelApi;use App\models\HotelPassengerInfo;use App\models\LogModel;use App\models\Majara;use App\models\NoticesHotel;use App\models\Opinion;use App\models\OpOnActivity;use App\models\PicItem;use App\models\Place;use App\models\PlaceStyle;use App\models\Question;use App\models\Report;use App\models\Restaurant;use App\models\Section;use App\models\SectionPage;use App\models\SpecialAdvice;use App\models\State;use App\models\Survey;use App\models\Tag;use App\models\User;use App\models\UserOpinion;use App\models\saveApiInfo;use Carbon\Carbon;use Exception;use Illuminate\Support\Facades\Auth;use Illuminate\Support\Facades\Cache;use Illuminate\Support\Facades\DB;use Illuminate\Support\Facades\Hash;use Illuminate\Support\Facades\Redirect;use Illuminate\Support\Facades\Session;use Illuminate\Support\Facades\URL;use Illuminate\Support\Facades\View;use PHPExcel;class HotelController extends Controller {    public function editor($placeId, $kindPlaceId)    {        switch ($kindPlaceId) {            case 4:            default:                $place = Hotel::whereId($placeId);                break;            case 1:                $place = Amaken::whereId($placeId);                break;            case 3:                $place = Restaurant::whereId($placeId);                break;            case 6:                $place = Majara::whereId($placeId);                break;            case 8:                $place = Adab::whereId($placeId);                break;        }        return view('editor', ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'placeName' => $place->name,            'tags' => PicItem::whereKindPlaceId($kindPlaceId)->get()]);    }    private function rrmdir($dir)    {        if (is_dir($dir)) {            $objects = scandir($dir);            foreach ($objects as $object) {                if ($object != "." && $object != "..") {                    if (filetype($dir . "/" . $object) == "dir")                        $this->rrmdir($dir . "/" . $object);                    else unlink($dir . "/" . $object);                }            }            reset($objects);            rmdir($dir);        }    }    private function getNearbies($C, $D)    {        $D *= 3.14 / 180;        $C *= 3.14 / 180;        $nearbyHotels = DB::select("SELECT id, name, C, D, file, pic_1, alt1, acos(" . sin($D) . " * sin(D / 180 * 3.14) + " . cos($D) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . $C . ")) * 6371 as distance FROM hotels HAVING distance between 0.001 and " . ConfigModel::first()->radius . " order by distance ASC limit 0, 4");        $hotelPlaceId = Place::whereName('هتل')->first()->id;        foreach ($nearbyHotels as $nearbyHotel) {            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $nearbyHotel->file . '/l-1.jpg')))                $nearbyHotel->pic = URL::asset("_images/hotels/" . $nearbyHotel->file . '/l-1.jpg');            else                $nearbyHotel->pic = URL::asset("_images/nopic/blank.jpg");            $condition = ['placeId' => $nearbyHotel->id, 'kindPlaceId' => $hotelPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $nearbyHotel->reviews = LogModel::where($condition)->count();            $nearbyHotel->distance = round($nearbyHotel->distance, 2);            $nearbyHotel->rate = getRate($nearbyHotel->id, $hotelPlaceId)[1];        }        $nearbyRestaurants = DB::select("SELECT id, name, C, D, kind_id, file, pic_1, alt1, acos(" . sin($D) . " * sin(D / 180 * 3.14) + " . cos($D) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . ($C) . ")) * 6371 as distance FROM restaurant HAVING distance between 0.001 and " . ConfigModel::first()->radius . " order by distance ASC limit 0, 4");        $restaurantPlaceId = Place::whereName('رستوران')->first()->id;        foreach ($nearbyRestaurants as $nearbyRestaurant) {            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $nearbyRestaurant->file . '/l-1.jpg')))                $nearbyRestaurant->pic = URL::asset("_images/restaurant/" . $nearbyRestaurant->file . '/l-1.jpg');            else                $nearbyRestaurant->pic = URL::asset("_images/nopic/blank.jpg");            $condition = ['placeId' => $nearbyRestaurant->id, 'kindPlaceId' => $restaurantPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $nearbyRestaurant->reviews = LogModel::where($condition)->count();            $nearbyRestaurant->distance = round($nearbyRestaurant->distance, 2);            $nearbyRestaurant->rate = getRate($nearbyRestaurant->id, $restaurantPlaceId)[1];        }        $nearbyAmakens = DB::select("SELECT id, name, mooze, tarikhi, tafrihi, tabiatgardi, markazkharid,  C, D, file, pic_1, alt1, acos(" . sin($D) . " * sin(D / 180 * 3.14) + " . cos($D) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . ($C) . ")) * 6371 as distance FROM amaken HAVING distance between 0.001 and " . ConfigModel::first()->radius . " order by distance ASC limit 0, 4");        $amakenPlaceId = Place::whereName('اماکن')->first()->id;        foreach ($nearbyAmakens as $nearbyAmaken) {            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $nearbyAmaken->file . '/l-1.jpg')))                $nearbyAmaken->pic = URL::asset("_images/amaken/" . $nearbyAmaken->file . '/l-1.jpg');            else                $nearbyAmaken->pic = URL::asset("_images/nopic/blank.jpg");            $condition = ['placeId' => $nearbyAmaken->id, 'kindPlaceId' => $amakenPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $nearbyAmaken->reviews = LogModel::where($condition)->count();            $nearbyAmaken->distance = round($nearbyAmaken->distance, 2);            $nearbyAmaken->rate = getRate($nearbyAmaken->id, $amakenPlaceId)[1];        }        return [$nearbyHotels, $nearbyRestaurants, $nearbyAmakens];    }    private function getSimilarHotels($place)    {        $stateId = State::whereId(Cities::whereId($place->cityId)->stateId)->id;        $hotels = DB::Select('select * from hotels where cityId in (select cities.id from cities where stateId = ' . $stateId . ')');        $arr = [];        $count = 0;        foreach ($hotels as $hotel) {            if ($hotel->id == $place->id) {                $hotel->point = -1;                continue;            }            $point = 0;            if ($hotel->tarikhi == $place->tarikhi)                $point += 3;            if ($hotel->coffeeshop == $place->coffeeshop)                $point += 3;            if ($hotel->hoome == $place->hoome)                $point += 3;            if ($hotel->shologh == $place->shologh)                $point += 3;            if ($hotel->khalvat == $place->khalvat)                $point += 3;            if ($hotel->tabiat == $place->tabiat)                $point += 3;            if ($hotel->kooh == $place->kooh)                $point += 3;            if ($hotel->darya == $place->darya)                $point += 3;            if ($hotel->rate_int == $place->rate_int)                $point += 2;            $arr[$count++] = [$count, $point];        }        usort($arr, function ($a, $b) {            return $a[1] - $b[1];        });        if (count($hotels) < 4)            $out = Hotel::take(4)->get();        else            $out = [$hotels[$arr[0][0]], $hotels[$arr[1][0]], $hotels[$arr[2][0]], $hotels[$arr[3][0]]];        $kindPlaceId = Place::whereName('هتل')->first()->id;        for ($i = 0; $i < count($out); $i++) {            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $out[$i]->file . '/f-1.jpg')))                $out[$i]->pic = URL::asset("_images/hotels/" . $out[$i]->file . '/f-1.jpg');            else                $out[$i]->pic = URL::asset("_images/nopic/blank.jpg");            $condition = ['placeId' => $out[$i]->id, 'kindPlaceId' => $kindPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $out[$i]->reviews = LogModel::where($condition)->count();            $out[$i]->rate = getRate($out[$i]->id, $kindPlaceId)[1];        }        return $out;    }    private function getSimilarAmakens($place)    {        $stateId = State::whereId(Cities::whereId($place->cityId)->stateId)->id;        $amakens = DB::Select('select * from amaken where cityId in (select cities.id from cities where stateId = ' . $stateId . ')');        $arr = [];        $count = 0;        foreach ($amakens as $amaken) {            if ($amaken->id == $place->id) {                $amaken->point = -1;                continue;            }            $point = 0;            if ($amaken->tarikhibana == $place->tarikhibana)                $point += 3;            if ($amaken->modern == $place->modern)                $point += 3;            if ($amaken->mamooli == $place->mamooli)                $point += 3;            if ($amaken->tabiat == $place->tabiat)                $point += 3;            if ($amaken->kooh == $place->kooh)                $point += 3;            if ($amaken->darya == $place->darya)                $point += 3;            $arr[$count++] = [$count, $point];        }        usort($arr, function ($a, $b) {            return $a[1] - $b[1];        });        $out = [$amakens[$arr[0][0]], $amakens[$arr[1][0]], $amakens[$arr[2][0]], $amakens[$arr[3][0]]];        $kindPlaceId = Place::whereName('اماکن')->first()->id;        for ($i = 0; $i < count($out); $i++) {            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $out[$i]->file . '/f-1.jpg')))                $out[$i]->pic = URL::asset("_images/amaken/" . $out[$i]->file . '/f-1.jpg');            else                $out[$i]->pic = URL::asset("_images/nopic/blank.jpg");            $condition = ['placeId' => $out[$i]->id, 'kindPlaceId' => $kindPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $out[$i]->reviews = LogModel::where($condition)->count();            $out[$i]->rate = getRate($out[$i]->id, $kindPlaceId)[1];        }        return $out;    }    private function getSimilarMajaras($place)    {        $stateId = State::whereId(Cities::whereId($place->cityId)->stateId)->id;        $amakens = DB::Select('select * from amaken where cityId in (select cities.id from cities where stateId = ' . $stateId . ')');        $arr = [];        $count = 0;        foreach ($amakens as $amaken) {            if ($amaken->id == $place->id) {                $amaken->point = -1;                continue;            }            $point = 0;            if ($amaken->tarikhibana == $place->tarikhibana)                $point += 3;            if ($amaken->modern == $place->modern)                $point += 3;            if ($amaken->mamooli == $place->mamooli)                $point += 3;            if ($amaken->tabiat == $place->tabiat)                $point += 3;            if ($amaken->kooh == $place->kooh)                $point += 3;            if ($amaken->darya == $place->darya)                $point += 3;            $arr[$count++] = [$count, $point];        }        usort($arr, function ($a, $b) {            return $a[1] - $b[1];        });        $out = [$amakens[$arr[0][0]], $amakens[$arr[1][0]], $amakens[$arr[2][0]], $amakens[$arr[3][0]]];        $kindPlaceId = Place::whereName('اماکن')->first()->id;        for ($i = 0; $i < count($out); $i++) {            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $out[$i]->file . '/f-1.jpg')))                $out[$i]->pic = URL::asset("_images/amaken/" . $out[$i]->file . '/f-1.jpg');            else                $out[$i]->pic = URL::asset("_images/nopic/blank.jpg");            $condition = ['placeId' => $out[$i]->id, 'kindPlaceId' => $kindPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $out[$i]->reviews = LogModel::where($condition)->count();            $out[$i]->rate = getRate($out[$i]->id, $kindPlaceId)[1];        }        return $out;    }    private function getSimilarRestaurants($place)    {        $stateId = State::whereId(Cities::whereId($place->cityId)->stateId)->id;        $restaurants = DB::Select('select * from restaurant where cityId in (select cities.id from cities where stateId = ' . $stateId . ')');        $arr = [];        $count = 0;        foreach ($restaurants as $restaurant) {            if ($restaurant->id == $place->id) {                $restaurant->point = -1;                continue;            }            $point = 0;            if ($restaurant->modern == $place->modern)                $point += 3;            if ($restaurant->mamooli == $place->mamooli)                $point += 3;            if ($restaurant->kind_id == $place->kind_id)                $point += 3;            if ($restaurant->food_irani == $place->food_irani)                $point += 3;            if ($restaurant->food_farangi == $place->food_farangi)                $point += 3;            if ($restaurant->food_mahali == $place->food_mahali)                $point += 3;            $arr[$count++] = [$count, $point];        }        usort($arr, function ($a, $b) {            return $a[1] - $b[1];        });        $out = [$restaurants[$arr[0][0]], $restaurants[$arr[1][0]], $restaurants[$arr[2][0]], $restaurants[$arr[3][0]]];        $kindPlaceId = Place::whereName('رستوران')->first()->id;        for ($i = 0; $i < count($out); $i++) {            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $out[$i]->file . '/f-1.jpg')))                $out[$i]->pic = URL::asset("_images/restaurant/" . $out[$i]->file . '/f-1.jpg');            else                $out[$i]->pic = URL::asset("_images/nopic/blank.jpg");            $condition = ['placeId' => $out[$i]->id, 'kindPlaceId' => $kindPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $out[$i]->reviews = LogModel::where($condition)->count();            $out[$i]->rate = getRate($out[$i]->id, $kindPlaceId)[1];        }        return $out;    }    public function getSimilarsHotel()    {        if (isset($_POST["placeId"])) {            $place = Hotel::whereId(makeValidInput($_POST["placeId"]));            if ($place != null) {                echo \GuzzleHttp\json_encode($this->getSimilarHotels($place));                return;            }        }        echo \GuzzleHttp\json_encode([]);    }    public function getSimilarsRestaurant()    {        if (isset($_POST["placeId"])) {            $place = Restaurant::whereId(makeValidInput($_POST["placeId"]));            if ($place != null) {                echo \GuzzleHttp\json_encode($this->getSimilarRestaurants($place));                return;            }        }        echo \GuzzleHttp\json_encode([]);    }    public function getSimilarsAmaken()    {        if (isset($_POST["placeId"])) {            $place = Amaken::whereId(makeValidInput($_POST["placeId"]));            if ($place != null) {                echo \GuzzleHttp\json_encode($this->getSimilarAmakens($place));                return;            }        }        echo \GuzzleHttp\json_encode([]);    }    public function getSimilarsMajara()    {        if (isset($_POST["placeId"])) {            $place = Majara::whereId(makeValidInput($_POST["placeId"]));            if ($place != null) {                echo \GuzzleHttp\json_encode($this->getSimilarMajaras($place));                return;            }        }        echo \GuzzleHttp\json_encode([]);    }    public function getNearby()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"])) {            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            switch ($kindPlaceId) {                case 1:                    $place = Amaken::whereId(makeValidInput($_POST["placeId"]));                    break;                case 3:                    $place = Restaurant::whereId(makeValidInput($_POST["placeId"]));                    break;                case 4:                default:                    $place = Hotel::whereId(makeValidInput($_POST["placeId"]));                    break;                case 8:                    $place = Majara::whereId(makeValidInput($_POST["placeId"]));                    break;            }            if ($place != null) {                echo \GuzzleHttp\json_encode($this->getNearbies($place->C, $place->D));                return;            }        }        echo \GuzzleHttp\json_encode([]);    }    public function getLogPhotos()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            switch ($kindPlaceId) {                case 1:                default:                    $imgPath = "amaken";                    break;                case 3:                    $imgPath = "restaurant";                    break;                case 4:                    $imgPath = "hotel";                    break;                case 6:                    $imgPath = "majara";                    break;                case 8:                    $place = Adab::whereId($placeId);                    if ($place->category == 3) {                        ;                        $imgPath = "ghazamahali";                    } else {                        if ($place->category == 1)                            $imgPath = "soghat";                        else                            $imgPath = "sanaye";                    }                    break;            }            $aksActivityId = Activity::whereName('عکس')->first()->id;            $logPhotos = DB::select("select picItems.id, picItems.name, count(*) as countNum, text from log, picItems WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and log.kindPlaceId = " . $kindPlaceId . " and pic <> 0 and picItems.id = log.pic group by(picItems.id)");            foreach ($logPhotos as $logPhoto) {                if (file_exists(__DIR__ . '/../../../../assets/userPhoto/' . $imgPath . '/l-' . $logPhoto->text))                    $logPhoto->text = URL::asset('userPhoto/' . $imgPath . '/l-' . $logPhoto->text);                else                    $logPhoto->text = URL::asset('_images') . '/nopic/blank.jpg';            }            echo \GuzzleHttp\json_encode($logPhotos);            return;        }        echo \GuzzleHttp\json_encode([]);    }    public function getSlider1Photo()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["val"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $val = makeValidInput($_POST["val"]);            switch ($kindPlaceId) {                case 1:                default:                    $subDir = "/amaken/";                    $place = Amaken::whereId($placeId);                    break;                case 3:                    $subDir = "/restaurant/";                    $place = Restaurant::whereId($placeId);                    break;                case 4:                    $subDir = "/hotels/";                    $place = Hotel::whereId($placeId);                    break;                case 6:                    $subDir = "/majara/";                    $place = Majara::whereId($placeId);                    break;                case 8:                    $place = Adab::whereId($placeId);                    if ($place->category == 3)                        $subDir = "/adab/ghazamahali/";                    else                        $subDir = '/adab/soghat/';                    break;            }            if ($place != null) {                switch ($val) {                    case 1:                    default:                        if (file_exists((__DIR__ . '/../../../../assets/_images') . $subDir . $place->file . '/s-1.jpg'))                            echo URL::asset('_images') . $subDir . $place->file . '/s-1.jpg';                        else                            echo URL::asset('_images/nopic/blank.jpg');                        break;                    case 2:                        if (file_exists((__DIR__ . '/../../../../assets/_images') . $subDir . $place->file . '/s-2.jpg' ))                            echo URL::asset('_images') . $subDir . $place->file . '/s-2.jpg' ;                        else                            echo URL::asset('_images/nopic/blank.jpg');                        break;                    case 3:                        if (file_exists((__DIR__ . '/../../../../assets/_images') . $subDir . $place->file . '/s-3.jpg' ))                            echo URL::asset('_images') . $subDir . $place->file . '/s-3.jpg' ;                        else                            echo URL::asset('_images/nopic/blank.jpg');                        break;                    case 4:                        if (file_exists((__DIR__ . '/../../../../assets/_images') . $subDir . $place->file . '/s-4.jpg'))                            echo URL::asset('_images') . $subDir . $place->file . '/s-4.jpg';                        else                            echo URL::asset('_images/nopic/blank.jpg');                        break;                    case 5:                        if (file_exists((__DIR__ . '/../../../../assets/_images') . $subDir . $place->file . '/s-5.jpg'))                            echo URL::asset('_images') . $subDir . $place->file . '/s-5.jpg';                        else                            echo URL::asset('_images/nopic/blank.jpg');                        break;                }                return;            }        }        echo "nok";    }    public function getSlider2Photo()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["val"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $val = makeValidInput($_POST["val"]);            $aksActivityId = Activity::whereName('عکس')->first()->id;            $tmp = DB::select("select text from log WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and pic <> 0 limit " . $val . ', 1');            if ($tmp != null && count($tmp) > 0) {                switch ($kindPlaceId) {                    case 1:                    default:                        $subDir = "/amaken/";                        break;                    case 3:                        $subDir = "/restaurant/";                        break;                    case 4:                        $subDir = "/hotel/";                        break;                    case 6:                        $subDir = "/majara/";                        break;                    case 8:                        $subDir = '/adab/';                        break;                }                if (file_exists(__DIR__ . '/../../../../assets/userPhoto' . $subDir . 'l-' . $tmp[0]->text))                    echo URL::asset('userPhoto' . $subDir . 'l-' . $tmp[0]->text);                else                    echo URL::asset('_images/nopic/blank.jpg');                return;            }            echo URL::asset('_images/nopic/blank.jpg');            return;        }        echo "nok";    }    public function showAmakenDetail($placeId, $placeName = "", $mode = "", $err = "") {        if (Amaken::whereId($placeId) == null)            return Redirect::route('main');        $hasLogin = true;        $kindPlaceId = Place::whereName('اماکن')->first()->id;        $uId = -1;        if (Auth::check())            $uId = Auth::user()->id;        else            $hasLogin = false;        if ($hasLogin) {            $activityId = Activity::whereName('مشاهده')->first()->id;            $condition = ['visitorId' => $uId, 'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->activityId = $activityId;                $log->time = getToday()["time"];                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->visitorId = $uId;                $log->date = date('Y-m-d');                $log->save();            } else {                $log->date = date('Y-m-d');                $log->save();            }        }        $bookMark = false;        $condition = ['visitorId' => $uId, 'activityId' => Activity::whereName("نشانه گذاری")->first()->id,            'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];        if (LogModel::where($condition)->count() > 0)            $bookMark = true;        $rates = getRate($placeId, $kindPlaceId);        $save = false;        $count = DB::select("select count(*) as tripPlaceNum from trip, tripPlace WHERE tripPlace.placeId = " . $placeId . " and tripPlace.kindPlaceId = " . $kindPlaceId . " and tripPlace.tripId = trip.id and trip.uId = " . $uId);        if ($count[0]->tripPlaceNum > 0)            $save = true;        $place = Amaken::whereId($placeId);        $city = Cities::whereId($place->cityId);        $state = State::whereId($city->stateId);        $photos = [];        $sitePhotos = 1;        if (!empty($place->pic_1)) {            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/s-1.jpg'))) {                $photos[count($photos)] = URL::asset('_images/amaken/' . $place->file . '/s-1.jpg');                $thumbnail = URL::asset('_images/amaken/' . $place->file . '/f-1.jpg');            } else {                $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');                $thumbnail = URL::asset('_images/nopic/blank.jpg');            }        } else {            $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            $thumbnail = URL::asset('_images/nopic/blank.jpg');        }        if (!empty($place->pic_2)) {            $sitePhotos++;        }        if (!empty($place->pic_3)) {            $sitePhotos++;        }        if (!empty($place->pic_4)) {            $sitePhotos++;        }        if (!empty($place->pic_5)) {            $sitePhotos++;        }        $aksActivityId = Activity::whereName('عکس')->first()->id;        $userPhotos = 0;        $logPhoto = '';        $tmp = DB::select("select count(*) as countNum from log WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and pic <> 0");        if ($tmp != null && count($tmp) > 0)            $userPhotos = $tmp[0]->countNum;        if ($userPhotos > 0) {            $tmp2 = DB::select("select picItems.id, picItems.name, count(*) as countNum, text from log, picItems WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and log.kindPlaceId = " . $kindPlaceId . " and pic <> 0 and picItems.id = log.pic group by(picItems.id)");            if ($tmp2 != null && count($tmp2) > 0) {                if (file_exists(__DIR__ . '/../../../../assets/userPhoto/amaken/l-' . $tmp2[0]->text))                    $logPhoto['pic'] = URL::asset('userPhoto/amaken/l-' . $tmp2[0]->text);                else                    $logPhoto['pic'] = URL::asset('_images/nopic/blank.jpg');                $logPhoto['id'] = $tmp2[0]->id;            }        }        $srcCities = DB::select("select DISTINCT(src) from log, comment WHERE log.placeId = " . $placeId . ' and ' .            'kindPlaceId = ' . $kindPlaceId . ' and activityId = ' . Activity::whereName('نظر')->first()->id .            ' and logId = log.id and status = 1');        return view('hotel-details', array('place' => $place, 'save' => $save, 'city' => $city, 'thumbnail' => $thumbnail,            'tags' => Tag::whereKindPlaceId($kindPlaceId)->get(), 'state' => $state, 'avgRate' => $rates[1],            'kindPlaceId' => $kindPlaceId, 'mode' => $mode, 'rates' => $rates[0], 'config' => ConfigModel::first(),            'photos' => $photos, 'userPhotos' => $userPhotos, 'sitePhotos' => $sitePhotos, 'logPhoto' => $logPhoto,            'hasLogin' => $hasLogin, 'bookMark' => $bookMark, 'err' => $err, 'srcCities' => $srcCities,            'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => 'amaken',            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function showMajaraDetail($placeId, $placeName = "", $mode = "", $err = "") {        if (Majara::whereId($placeId) == null)            return Redirect::route('main');        $hasLogin = true;        $kindPlaceId = Place::whereName('ماجرا')->first()->id;        $uId = -1;        if (Auth::check())            $uId = Auth::user()->id;        else            $hasLogin = false;        if ($hasLogin) {            $activityId = Activity::whereName('مشاهده')->first()->id;            $condition = ['visitorId' => $uId, 'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->activityId = $activityId;                $log->time = getToday()["time"];                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->visitorId = $uId;                $log->date = date('Y-m-d');                $log->save();            } else {                $log->date = date('Y-m-d');                $log->save();            }        }        $bookMark = false;        $condition = ['visitorId' => $uId, 'activityId' => Activity::whereName("نشانه گذاری")->first()->id,            'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];        if (LogModel::where($condition)->count() > 0)            $bookMark = true;        $rates = getRate($placeId, $kindPlaceId);        $save = false;        $count = DB::select("select count(*) as tripPlaceNum from trip, tripPlace WHERE tripPlace.placeId = " . $placeId . " and tripPlace.kindPlaceId = " . $kindPlaceId . " and tripPlace.tripId = trip.id and trip.uId = " . $uId);        if ($count[0]->tripPlaceNum > 0)            $save = true;        $place = Majara::whereId($placeId);        $city = Cities::whereId($place->cityId);        $state = State::whereId($city->stateId);        $photos = [];        $sitePhotos = 1;        if (!empty($place->pic_1)) {            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/s-1.jpg'))) {                $photos[count($photos)] = URL::asset('_images/majara/' . $place->file . '/s-1.jpg');                $thumbnail = URL::asset('_images/majara/' . $place->file . '/f-1.jpg');            } else {                $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');                $thumbnail = URL::asset('_images/nopic/blank.jpg');            }        } else {            $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            $thumbnail = URL::asset('_images/nopic/blank.jpg');        }        if (!empty($place->pic_2)) {            $sitePhotos++;        }        if (!empty($place->pic_3)) {            $sitePhotos++;        }        if (!empty($place->pic_4)) {            $sitePhotos++;        }        if (!empty($place->pic_5)) {            $sitePhotos++;        }        $aksActivityId = Activity::whereName('عکس')->first()->id;        $userPhotos = 0;        $logPhoto = '';        $tmp = DB::select("select count(*) as countNum from log WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and pic <> 0");        if ($tmp != null && count($tmp) > 0)            $userPhotos = $tmp[0]->countNum;        if ($userPhotos > 0) {            $tmp2 = DB::select("select picItems.id, picItems.name, count(*) as countNum, text from log, picItems WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and log.kindPlaceId = " . $kindPlaceId . " and pic <> 0 and picItems.id = log.pic group by(picItems.id)");            if ($tmp2 != null && count($tmp2) > 0) {                if (file_exists(__DIR__ . '/../../../../assets/userPhoto/majara/l-' . $tmp2[0]->text))                    $logPhoto['pic'] = URL::asset('userPhoto/majara/l-' . $tmp2[0]->text);                else                    $logPhoto['pic'] = URL::asset('_images/nopic/blank.jpg');                $logPhoto['id'] = $tmp2[0]->id;            }        }        $srcCities = DB::select("select DISTINCT(src) from log, comment WHERE log.placeId = " . $placeId . ' and ' .            'kindPlaceId = ' . $kindPlaceId . ' and activityId = ' . Activity::whereName('نظر')->first()->id .            ' and logId = log.id and status = 1');        $place->address = $place->dastresi;        return view('hotel-details', array('place' => $place, 'save' => $save, 'city' => $city, 'thumbnail' => $thumbnail,            'tags' => Tag::whereKindPlaceId($kindPlaceId)->get(), 'state' => $state, 'avgRate' => $rates[1],            'kindPlaceId' => $kindPlaceId, 'mode' => $mode, 'rates' => $rates[0], 'config' => ConfigModel::first(),            'photos' => $photos, 'userPhotos' => $userPhotos, 'sitePhotos' => $sitePhotos, 'logPhoto' => $logPhoto,            'hasLogin' => $hasLogin, 'bookMark' => $bookMark, 'err' => $err, 'srcCities' => $srcCities,            'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => 'amaken',            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function showRestaurantDetail($placeId, $placeName = "", $mode = "", $err = "") {        if (Restaurant::whereId($placeId) == null)            return Redirect::route('main');        $hasLogin = true;        $kindPlaceId = Place::whereName('رستوران')->first()->id;        $uId = -1;        if (Auth::check())            $uId = Auth::user()->id;        else            $hasLogin = false;        if ($hasLogin) {            $activityId = Activity::whereName('مشاهده')->first()->id;            $condition = ['visitorId' => $uId, 'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->activityId = $activityId;                $log->time = getToday()["time"];                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->visitorId = $uId;                $log->date = date('Y-m-d');                $log->save();            } else {                $log->date = date('Y-m-d');                $log->save();            }        }        $bookMark = false;        $condition = ['visitorId' => $uId, 'activityId' => Activity::whereName("نشانه گذاری")->first()->id,            'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];        if (LogModel::where($condition)->count() > 0)            $bookMark = true;        $rates = getRate($placeId, $kindPlaceId);        $save = false;        $count = DB::select("select count(*) as tripPlaceNum from trip, tripPlace WHERE tripPlace.placeId = " . $placeId . " and tripPlace.kindPlaceId = " . $kindPlaceId . " and tripPlace.tripId = trip.id and trip.uId = " . $uId);        if ($count[0]->tripPlaceNum > 0)            $save = true;        $place = Restaurant::whereId($placeId);        $city = Cities::whereId($place->cityId);        $state = State::whereId($city->stateId);        $photos = [];        $sitePhotos = 1;        if (!empty($place->pic_1)) {            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/s-1.jpg'))) {                $photos[count($photos)] = URL::asset('_images/restaurant/' . $place->file . '/s-1.jpg');                $thumbnail = URL::asset('_images/restaurant/' . $place->file . '/f-1.jpg');            } else {                $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');                $thumbnail = URL::asset('_images/nopic/blank.jpg');            }        } else {            $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            $thumbnail = URL::asset('_images/nopic/blank.jpg');        }        if (!empty($place->pic_2)) {            $sitePhotos++;        }        if (!empty($place->pic_3)) {            $sitePhotos++;        }        if (!empty($place->pic_4)) {            $sitePhotos++;        }        if (!empty($place->pic_5)) {            $sitePhotos++;        }        $aksActivityId = Activity::whereName('عکس')->first()->id;        $userPhotos = 0;        $logPhoto = '';        $tmp = DB::select("select count(*) as countNum from log WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and pic <> 0");        if ($tmp != null && count($tmp) > 0)            $userPhotos = $tmp[0]->countNum;        if ($userPhotos > 0) {            $tmp2 = DB::select("select picItems.id, picItems.name, count(*) as countNum, text from log, picItems WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and log.kindPlaceId = " . $kindPlaceId . " and pic <> 0 and picItems.id = log.pic group by(picItems.id)");            if ($tmp2 != null && count($tmp2) > 0) {                if (file_exists(__DIR__ . '/../../../../assets/userPhoto/restaurant/l-' . $tmp2[0]->text))                    $logPhoto['pic'] = URL::asset('userPhoto/restaurant/l-' . $tmp2[0]->text);                else                    $logPhoto['pic'] = URL::asset('_images/nopic/blank.jpg');                $logPhoto['id'] = $tmp2[0]->id;            }        }        $srcCities = DB::select("select DISTINCT(src) from log, comment WHERE log.placeId = " . $placeId . ' and ' .            'kindPlaceId = ' . $kindPlaceId . ' and activityId = ' . Activity::whereName('نظر')->first()->id .            ' and logId = log.id and status = 1');        return view('hotel-details', array('place' => $place, 'save' => $save, 'city' => $city, 'thumbnail' => $thumbnail,            'tags' => Tag::whereKindPlaceId($kindPlaceId)->get(), 'state' => $state, 'avgRate' => $rates[1],            'kindPlaceId' => Place::whereName('رستوران')->first()->id, 'mode' => $mode, 'rates' => $rates[0],            'photos' => $photos, 'userPhotos' => $userPhotos, 'sitePhotos' => $sitePhotos, 'logPhoto' => $logPhoto,            'hasLogin' => $hasLogin, 'bookMark' => $bookMark, 'err' => $err, 'srcCities' => $srcCities, 'config' => ConfigModel::first(),            'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => 'restaurant',            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function showAdabDetail($placeId, $placeName = "", $mode = "", $err = "")    {        if (Adab::whereId($placeId) == null)            return Redirect::route('main');        $hasLogin = true;        $kindPlaceId = Place::whereName('آداب')->first()->id;        $uId = -1;        if (Auth::check())            $uId = Auth::user()->id;        else            $hasLogin = false;        if ($hasLogin) {            $activityId = Activity::whereName('مشاهده')->first()->id;            $condition = ['visitorId' => $uId, 'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->activityId = $activityId;                $log->time = getToday()["time"];                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->visitorId = $uId;                $log->date = date('Y-m-d');                $log->save();            } else {                $log->date = date('Y-m-d');                $log->save();            }        }        $bookMark = false;        $condition = ['visitorId' => $uId, 'activityId' => Activity::whereName("نشانه گذاری")->first()->id,            'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];        if (LogModel::where($condition)->count() > 0)            $bookMark = true;        $rates = getRate($placeId, $kindPlaceId);        $place = Adab::whereId($placeId);        $state = State::whereId($place->stateId);        $photos = [];        $sitePhotos = 1;        if (!empty($place->pic_1)) {            if ($place->category == 3) {                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/s-1.jpg'))) {                    $photos[count($photos)] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/s-1.jpg');                    $thumbnail = URL::asset('_images/adab/ghazamahali/' . $place->file . '/f-1.jpg');                } else {                    $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');                    $thumbnail = URL::asset('_images/nopic/blank.jpg');                }            } else {                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/s-1.jpg'))) {                    $photos[count($photos)] = URL::asset('_images/adab/soghat/' . $place->file . '/s-1.jpg');                    $thumbnail = URL::asset('_images/adab/soghat/' . $place->file . '/f-1.jpg');                } else {                    $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');                    $thumbnail = URL::asset('_images/nopic/blank.jpg');                }            }        } else {            $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            $thumbnail = URL::asset('_images/nopic/blank.jpg');        }        if (!empty($place->pic_2)) {            $sitePhotos++;        }        if (!empty($place->pic_3)) {            $sitePhotos++;        }        if (!empty($place->pic_4)) {            $sitePhotos++;        }        if (!empty($place->pic_5)) {            $sitePhotos++;        }        $aksActivityId = Activity::whereName('عکس')->first()->id;        $userPhotos = 0;        $logPhoto = '';        $tmp = DB::select("select count(*) as countNum from log WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and pic <> 0");        if ($tmp != null && count($tmp) > 0)            $userPhotos = $tmp[0]->countNum;        if ($userPhotos > 0) {            $tmp2 = DB::select("select picItems.id, picItems.name, count(*) as countNum, text from log, picItems WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and log.kindPlaceId = " . $kindPlaceId . " and pic <> 0 and picItems.id = log.pic group by(picItems.id)");            if ($tmp2 != null && count($tmp2) > 0) {                if (file_exists(__DIR__ . '/../../../../assets/userPhoto/adab/l-' . $tmp2[0]->text))                    $logPhoto['pic'] = URL::asset('userPhoto/adab/l-' . $tmp2[0]->text);                else                    $logPhoto['pic'] = URL::asset('_images/nopic/blank.jpg');                $logPhoto['id'] = $tmp2[0]->id;            }        }        $srcCities = DB::select("select DISTINCT(src) from log, comment WHERE log.placeId = " . $placeId . ' and ' .            'kindPlaceId = ' . $kindPlaceId . ' and activityId = ' . Activity::whereName('نظر')->first()->id .            ' and logId = log.id and status = 1');        $brands = [];        if (!empty($place->brand_name_1)) {            $brands[count($brands)] = [$place->brand_name_1, $place->des_name_1];        }        if (!empty($place->brand_name_2)) {            $brands[count($brands)] = [$place->brand_name_2, $place->des_name_2];        }        if (!empty($place->brand_name_3)) {            $brands[count($brands)] = [$place->brand_name_3, $place->des_name_3];        }        if (!empty($place->brand_name_4)) {            $brands[count($brands)] = [$place->brand_name_4, $place->des_name_4];        }        if (!empty($place->brand_name_5)) {            $brands[count($brands)] = [$place->brand_name_5, $place->des_name_5];        }        if (!empty($place->brand_name_6)) {            $brands[count($brands)] = [$place->brand_name_6, $place->des_name_6];        }        if (!empty($place->brand_name_7)) {            $brands[count($brands)] = [$place->brand_name_7, $place->des_name_7];        }        switch ($place->category) {            case 1:            default:                $placeMode = 'soghat';                break;            case 3:                $placeMode = 'ghazamahali';                break;            case 6:                $placeMode = 'sanaye';                break;        }        return view('adabDetails', array('place' => $place, 'mode' => $mode, 'brands' => $brands, 'thumbnail' => $thumbnail,            'tags' => Tag::whereKindPlaceId($kindPlaceId)->get(), 'state' => $state, 'avgRate' => $rates[1],            'kindPlaceId' => $kindPlaceId, 'rates' => $rates[0], 'config' => ConfigModel::first(),            'photos' => $photos, 'userPhotos' => $userPhotos, 'sitePhotos' => $sitePhotos, 'logPhoto' => $logPhoto,            'hasLogin' => $hasLogin, 'bookMark' => $bookMark, 'srcCities' => $srcCities, 'err' => $err,            'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => $placeMode,            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function bookMark()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"])) {            $uId = Auth::user()->id;            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $condition = ['visitorId' => $uId, 'activityId' => Activity::whereName("نشانه گذاری")->first()->id,                'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];            $log = LogModel::where($condition)->first();            if ($log != null) {                $log->delete();                echo "ok";                return;            }            $log = new LogModel();            $log->placeId = $placeId;            $log->time = getToday()["time"];            $log->kindPlaceId = $kindPlaceId;            $log->visitorId = $uId;            $log->date = date('Y-m-d');            $log->activityId = Activity::whereName('نشانه گذاری')->first()->id;            try {                $log->save();                echo "ok";            } catch (Exception $x) {            }        }    }    function getCommentsCount()    {        if (isset($_POST["filters"]) && isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) &&            isset($_POST["tag"])) {            $filters = $_POST["filters"];            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $activityId = Activity::whereName('نظر')->first()->id;            $tag = makeValidInput($_POST["tag"]);            $season = [];            $rate = [];            $placeStyle = [];            $srcCity = [];            $total = DB::select("select count(*) as countNum from log, comment WHERE confirm = 1 and log.id = logId and placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and activityId = " . $activityId . " and status = 1")[0]->countNum;            if ($filters != -1) {                for ($i = 0; $i < count($filters); $i++) {                    $filter = makeValidInput($filters[$i]);                    $subStr = explode('_', $filter);                    if (count($subStr) == 2) {                        switch ($subStr[0]) {                            case "season":                                $season[count($season)] = $subStr[1];                                break;                            case "rate":                                $rate[count($rate)] = $subStr[1];                                break;                            case "placeStyle":                                $placeStyle[count($placeStyle)] = $subStr[1];                                break;                            case "srcCity":                                $srcCity[count($srcCity)] = $subStr[1];                                break;                        }                    }                }            }            $sql = "";            if (count($season) > 0)                $sql .= " and (";            for ($i = 0; $i < count($season) - 1; $i++) {                $sql .= "seasonTrip = " . $season[$i] . " OR ";            }            if (count($season) > 0)                $sql .= "seasonTrip = " . $season[count($season) - 1] . ')';            if (count($placeStyle) > 0)                $sql .= " and (";            for ($i = 0; $i < count($placeStyle) - 1; $i++) {                $sql .= "placeStyleId = " . $placeStyle[$i] . " OR ";            }            if (count($placeStyle) > 0)                $sql .= "placeStyleId = " . $placeStyle[count($placeStyle) - 1] . ')';            if (count($srcCity) > 0)                $sql .= " and (";            for ($i = 0; $i < count($srcCity) - 1; $i++) {                $sql .= "src = '" . $srcCity[$i] . "' OR ";            }            if (count($srcCity) > 0)                $sql .= "src = '" . $srcCity[count($srcCity) - 1] . "')";            if (count($rate) > 0) {                $sql .= ' and visitorId in (';                $rates = DB::select('select avg(rate) as AVGRATE, logId from log, userOpinions WHERE log.id = logId and placeId = ' . $placeId . " and kindPlaceId = " . $kindPlaceId . " and activityId = " . Activity::whereName('امتیاز')->first()->id . " group by(visitorId)");                $first = true;                foreach ($rates as $itr) {                    $itr->AVGRATE = ceil($itr->AVGRATE);                    if (in_array($itr->AVGRATE, $rate)) {                        if (!$first)                            $sql .= ', ';                        else                            $first = false;                        $sql .= LogModel::whereId($itr->logId)->visitorId;                    }                }                if ($first == true) {                    $sql .= ' -1 ';                }                $sql .= ')';            }            if ($tag != -1)                $sql .= " and text LIKE '%$tag%'";            $sql .= " and status = 1 and confirm = 1";            $logs = DB::select('select count(*) as countNum from log, comment WHERE log.id = logId and placeId = ' . $placeId .                " and kindPlaceId = " . $kindPlaceId . " and ActivityId = " . $activityId .                $sql);            echo json_encode([$logs[0]->countNum, $total]);        }    }    function opOnComment()    {        if (isset($_POST["logId"]) && isset($_POST["mode"])) {            $uId = Auth::user()->id;            $logId = makeValidInput($_POST["logId"]);            $mode = makeValidInput($_POST["mode"]);            $tmp = LogModel::whereId($logId);            if ($tmp == null || $tmp->confirm != 1)                return;            if ($mode == "like")                echo $this->likeComment($uId, $logId);            else if ($mode == "dislike")                echo $this->dislikeComment($uId, $logId);        }    }    private function likeComment($uId, $logId)    {        $out = 1;        $condition = ['logId' => $logId, 'uId' => $uId, 'like_' => 1];        if (OpOnActivity::where($condition)->count() > 0) {            echo 0;            return;        }        $condition = ['logId' => $logId, 'uId' => $uId, 'dislike' => 1];        $opOnActivity = OpOnActivity::where($condition)->first();        if ($opOnActivity != null) {            $out = 2;            $opOnActivity->dislike = 0;        } else {            $opOnActivity = new OpOnActivity();            $opOnActivity->uId = $uId;            $opOnActivity->logId = $logId;        }        $log = LogModel::whereId($logId);        $log->date = date('Y-m-d');        $log->time = getToday()["time"];        $log->save();        $opOnActivity->time = time();        $opOnActivity->like_ = 1;        $opOnActivity->save();        echo $out;    }    private function dislikeComment($uId, $logId)    {        $out = 1;        $condition = ['logId' => $logId, 'uId' => $uId, 'dislike' => 1];        if (OpOnActivity::where($condition)->count() > 0) {            echo 0;            return;        }        $condition = ['logId' => $logId, 'uId' => $uId, 'like_' => 1];        $opOnActivity = OpOnActivity::where($condition)->first();        if ($opOnActivity != null) {            $out = 2;            $opOnActivity->like_ = 0;        } else {            $opOnActivity = new OpOnActivity();            $opOnActivity->uId = $uId;            $opOnActivity->logId = $logId;        }        $log = LogModel::whereId($logId);        $log->date = date('Y-m-d');        $log->time = getToday()["time"];        $log->save();        $opOnActivity->time = time();        $opOnActivity->dislike = 1;        $opOnActivity->save();        echo $out;    }    function getQuestions()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["page"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $page = makeValidInput($_POST["page"]);            $activityId = Activity::whereName('سوال')->first()->id;            $ansActivityId = Activity::whereName('پاسخ')->first()->id;            $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId, 'confirm' => 1];            $logs = LogModel::where($condition)->skip(($page - 1) * 6)->take(6)->get();            foreach ($logs as $log) {                $condition = ["activityId" => $activityId, 'visitorId' => $log->visitorId];                $log->comments = LogModel::where($condition)->count();                $user = User::whereId($log->visitorId);                $log->visitorId = $user->username;                $log->visitorPic = $user->picture;                if (count(explode('.', $log->visitorPic)) == 1) {                    if (!empty(DefaultPic::whereId($log->visitorPic)))                        $log->visitorPic = URL::asset('defaultPic/' . DefaultPic::whereId($log->visitorPic)->name);                    else                        $log->visitorPic = URL::asset('defaultPic/' . DefaultPic::first()->name);                } else {                    $log->visitorPic = URL::asset('userPhoto/' . $log->visitorPic);                }                $condition = ['relatedTo' => $log->id, 'activityId' => $ansActivityId, 'confirm' => 1];                $log->ansNum = LogModel::where($condition)->count();                $log->date = convertDate($log->date);            }            echo json_encode($logs);        }    }    function askQuestion()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["text"])) {            $text = makeValidInput($_POST["text"]);            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $activityId = Activity::whereName('سوال')->first()->id;            $uId = Auth::user()->id;            $log = new LogModel();            $log->visitorId = $uId;            $log->time = getToday()["time"];            $log->activityId = $activityId;            $log->placeId = $placeId;            $log->kindPlaceId = $kindPlaceId;            $log->text = $text;            $log->date = date("Y-m-d");            $log->save();            echo "ok";        }    }    function sendAns()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) &&            isset($_POST["text"]) && isset($_POST["relatedTo"])) {            $text = makeValidInput($_POST["text"]);            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $relatedTo = makeValidInput($_POST["relatedTo"]);            $activityId = Activity::whereName('پاسخ')->first()->id;            $uId = Auth::user()->id;            $tmp = LogModel::whereId($relatedTo);            if ($tmp == null || $tmp->confirm != 1)                return;            $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                'relatedTo' => $relatedTo, 'activityId' => $activityId, 'visitorId' => $uId];            if (LogModel::where($condition)->count() > 0) {                echo "nok";                return;            }            $log = new LogModel();            $log->visitorId = $uId;            $log->time = getToday()["time"];            $log->activityId = $activityId;            $log->placeId = $placeId;            $log->kindPlaceId = $kindPlaceId;            $log->text = $text;            $log->relatedTo = $relatedTo;            $log->date = date("Y-m-d");            $log->save();            echo "ok";        }    }    function sendAns2()    {        if (isset($_POST["text"]) && isset($_POST["relatedTo"])) {            $text = makeValidInput($_POST["text"]);            $relatedTo = makeValidInput($_POST["relatedTo"]);            $logTmp = LogModel::whereId($relatedTo);            if ($logTmp == null || $logTmp->confirm != 1)                return;            $activityId = Activity::whereName('پاسخ')->first()->id;            $uId = Auth::user()->id;            $condition = ['visitorId' => $uId, 'relatedTo' => $relatedTo, 'activityId' => $activityId];            if (LogModel::where($condition)->count() == 0) {                $log = new LogModel();                $log->visitorId = $uId;                $log->time = getToday()["time"];                $log->activityId = $activityId;                $log->placeId = $logTmp->placeId;                $log->kindPlaceId = $logTmp->kindPlaceId;                $log->text = $text;                $log->relatedTo = $relatedTo;                $log->date = date("Y-m-d");                $log->save();                echo "ok";            } else {                echo "nok";            }        }    }    function showAllAns()    {        if (isset($_POST["logId"]) && isset($_POST["num"])) {            $num = makeValidInput($_POST["num"]);            $logId = makeValidInput($_POST["logId"]);            $ansActivityId = Activity::whereName('پاسخ')->first()->id;            $condition = ["relatedTo" => $logId, 'activityId' => $ansActivityId, 'confirm' => 1];            if ($num == -1)                $logs = LogModel::where($condition)->get();            else                $logs = LogModel::where($condition)->take($num)->get();            foreach ($logs as $log) {                $log->visitorId = User::whereId($log->visitorId)->username;                $condition = ['logId' => $log->id, 'like_' => 1];                $log->rate = OpOnActivity::where($condition)->count();                $condition = ['logId' => $log->id, 'dislike' => 1];                $log->rate -= OpOnActivity::where($condition)->count();            }            echo json_encode($logs);        }    }    function writeReview($placeId, $kindPlaceId, $err = "")    {        switch ($kindPlaceId) {            case 1:            default:                $place = Amaken::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/amaken/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "amaken";                $state = State::whereId(Cities::whereId($place->cityId)->stateId)->name;                break;            case 3:                $place = Restaurant::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/restaurant/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "restaurant";                $state = State::whereId(Cities::whereId($place->cityId)->stateId)->name;                break;            case 4:                $place = Hotel::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/hotels/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "hotel";                $state = State::whereId(Cities::whereId($place->cityId)->stateId)->name;                break;            case 6:                $place = Majara::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/majara/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $state = State::whereId($place->cityId)->name;                $placeMode = "majara";                break;            case 8:                $place = Adab::whereId($placeId);                if ($place->category == 3) {                    if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/' . $place->pic_1)))                        $placePic = URL::asset('_images/adab/ghazamahali/' . $place->file . '/' . $place->pic_1);                    else                        $placePic = URL::asset('_images/nopic/blank.jpg');                } else {                    if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/' . $place->pic_1)))                        $placePic = URL::asset('_images/adab/soghat/' . $place->file . '/' . $place->pic_1);                    else                        $placePic = URL::asset('_images/nopic/blank.jpg');                }                $placeMode = "adab";                $state = State::whereId($place->stateId)->name;                break;        }        $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'visitorId' => Auth::user()->id,            'activityId' => Activity::whereName('نظر')->first()->id];        if ($kindPlaceId != 8) {            $city = Cities::whereId($place->cityId);            $log = LogModel::where($condition)->first();            if ($log != null) {                $comment = Comment::whereLogId($log->id)->first();                return view('review', array('placePic' => $placePic, 'city' => $city->name,                    'state' => State::whereId($city->stateId)->name, 'placeId' => $placeId, 'placeName' => $place->name,                    'kindPlaceId' => $kindPlaceId, 'opinions' => Opinion::whereKindPlaceId($kindPlaceId)->get(),                    'questions' => Question::whereKindPlaceId($kindPlaceId)->get(), 'err' => $err, 'log' => $log, 'comment' => $comment,                    'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => $placeMode));            }            return view('review', array('placePic' => $placePic, 'city' => $city->name,                'state' => State::whereId($city->stateId)->name, 'placeId' => $placeId, 'placeName' => $place->name,                'kindPlaceId' => $kindPlaceId, 'opinions' => Opinion::whereKindPlaceId($kindPlaceId)->get(),                'questions' => Question::whereKindPlaceId($kindPlaceId)->get(), 'err' => $err,                'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => $placeMode));        }        $city = State::whereId($place->stateId);        $log = LogModel::where($condition)->first();        if ($log != null) {            $comment = Comment::whereLogId($log->id)->first();            return view('review', array('placePic' => $placePic, 'city' => $city->name,                'placeId' => $placeId, 'placeName' => $place->name, 'state' => $state,                'kindPlaceId' => $kindPlaceId, 'opinions' => Opinion::whereKindPlaceId($kindPlaceId)->get(),                'questions' => Question::whereKindPlaceId($kindPlaceId)->get(), 'err' => $err, 'log' => $log, 'comment' => $comment,                'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => $placeMode));        } else {            return view('review', array('placePic' => $placePic, 'city' => $city->name,                'placeId' => $placeId, 'placeName' => $place->name, 'state' => $state,                'kindPlaceId' => $kindPlaceId, 'opinions' => Opinion::whereKindPlaceId($kindPlaceId)->get(),                'questions' => Question::whereKindPlaceId($kindPlaceId)->get(), 'err' => $err,                'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(), 'placeMode' => $placeMode));        }    }    function getOpinionRate()    {        if (isset($_POST["opinionId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["placeId"])) {            $uId = Auth::user()->id;            $condition = ['placeId' => makeValidInput($_POST["placeId"]), 'confirm' => 1,                'kindPlaceId' => makeValidInput($_POST["kindPlaceId"]), 'visitorId' => $uId,                'activityId' => Activity::whereName('امتیاز')->first()->id];            try {                $logId = LogModel::where($condition)->first()->id;                $condition = ['logId' => $logId, 'opinionId' => makeValidInput($_POST["opinionId"])];                echo UserOpinion::where($condition)->first()->rate;            } catch (Exception $x) {                echo 0;            }        }    }    function setPlaceRate()    {        if (isset($_POST["opinionId"]) && isset($_POST["rate"]) && isset($_POST["kindPlaceId"]) && isset($_POST["placeId"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $uId = Auth::user()->id;            $activityId = Activity::whereName('امتیاز')->first()->id;            $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'visitorId' => $uId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->visitorId = $uId;                $log->time = getToday()["time"];                $log->activityId = $activityId;                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->date = date('Y-m-d');                $log->confirm = 1;                $log->save();                $opinion = new UserOpinion();                $opinion->logId = $log->id;                $opinion->opinionId = makeValidInput($_POST["opinionId"]);                $opinion->rate = makeValidInput($_POST["rate"]);                try {                    $opinion->save();                } catch (Exception $x) {                    echo $x->getMessage();                }            } else {                $condition = ['logId' => $log->id, 'opinionId' => makeValidInput($_POST["opinionId"])];                $opinion = UserOpinion::where($condition)->first();                if ($opinion == null) {                    $opinion = new UserOpinion();                    $opinion->logId = $log->id;                    $opinion->opinionId = makeValidInput($_POST["opinionId"]);                    $opinion->rate = makeValidInput($_POST["rate"]);                    try {                        $opinion->save();                    } catch (Exception $x) {                        echo $x->getMessage();                    }                } else {                    $opinion->rate = makeValidInput($_POST["rate"]);                    try {                        $opinion->save();                    } catch (Exception $x) {                        echo $x->getMessage();                    }                }            }        }    }    function survey()    {        if (isset($_POST["questionId"]) && isset($_POST["ans"]) && isset($_POST["kindPlaceId"]) && isset($_POST["placeId"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $uId = Auth::user()->id;            $activityId = Activity::whereName('نظرسنجی')->first()->id;            $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'visitorId' => $uId,                'activityId' => $activityId];            $ans = makeValidInput($_POST["ans"]);            switch ($ans) {                case "yes":                    $ans = 1;                    break;                case "no":                    $ans = 2;                    break;                default:                    $ans = 3;            }            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->visitorId = $uId;                $log->time = getToday()["time"];                $log->activityId = $activityId;                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->date = date('Y-m-d');                $log->save();                $survey = new Survey();                $survey->logId = $log->id;                $survey->questionId = makeValidInput($_POST["questionId"]);                $survey->ans = $ans;                $survey->save();            } else {                $condition = ['logId' => $log->id, 'questionId' => makeValidInput($_POST["questionId"])];                $survey = Survey::where($condition)->first();                if ($survey == null) {                    $survey = new Survey();                    $survey->logId = $log->id;                    $survey->questionId = makeValidInput($_POST["questionId"]);                    $survey->ans = $ans;                    $survey->save();                } else {                    $survey->ans = $ans;                    $survey->save();                }            }        }    }    function getSurvey()    {        if (isset($_POST["questionId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["placeId"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $uId = Auth::user()->id;            $activityId = Activity::whereName('نظرسنجی')->first()->id;            $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'visitorId' => $uId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                echo "-1";                return;            }            $condition = ['questionId' => makeValidInput($_POST["questionId"]), 'logId' => $log->id];            $question = Survey::where($condition)->first();            if ($question == null) {                echo "-1";                return;            }            $ans = $question->ans;            switch ($ans) {                case 1:                    $ans = "yes";                    break;                case 2:                    $ans = "no";                    break;                default:                    $ans = "noIdea";            }            echo $ans;        }    }    function sendComment()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["placeStyle"]) &&            isset($_POST["reviewTitle"]) && isset($_POST["reviewText"]) && isset($_POST["src"]) &&            isset($_POST["seasonTrip"]) && isset($_POST["status"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $placeStyle = makeValidInput($_POST["placeStyle"]);            $reviewText = makeValidInput($_POST["reviewText"]);            $reviewTitle = makeValidInput($_POST["reviewTitle"]);            $src = makeValidInput($_POST["src"]);            $seasonTrip = makeValidInput($_POST["seasonTrip"]);            $status = makeValidInput($_POST["status"]);            $uId = Auth::user()->id;            $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'visitorId' => $uId,                'activityId' => Activity::whereName('امتیاز')->first()->id];            $log = LogModel::where($condition)->first();            if ($log == null) {                echo "-1";                return;            }            if (empty($reviewTitle)) {                echo "-2";                return;            }            if (empty($reviewText)) {                echo "-3";                return;            }            if (empty($placeStyle)) {                echo "-4";                return;            }            if (empty($src)) {                echo "-5";                return;            }            if (empty($seasonTrip)) {                echo "-6";                return;            }            if (Cities::whereName($src)->count() == 0) {                echo "-7";                return;            }            if ($status == 1)                $status = true;            else                $status = false;            $activityId = Activity::whereName('نظر')->first()->id;            $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'visitorId' => $uId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->visitorId = $uId;                $log->time = getToday()["time"];                $log->activityId = Activity::whereName('نظر')->first()->id;                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->date = date('Y-m-d');                $log->text = $reviewText;                $log->subject = $reviewTitle;                $log->save();                $comment = new Comment();                $comment->status = $status;                $comment->src = $src;                $comment->logId = $log->id;                $comment->placeStyleId = $placeStyle;                $comment->seasonTrip = $seasonTrip;                $comment->save();            } else {                $log->text = $reviewText;                $log->subject = $reviewTitle;                $log->confirm = 0;                $log->save();                $comment = Comment::whereLogId($log->id)->first();                if ($comment != null) {                    $comment->status = $status;                    $comment->src = $src;                    $comment->logId = $log->id;                    $comment->placeStyleId = $placeStyle;                    $comment->seasonTrip = $seasonTrip;                    $comment->save();                }            }            echo "ok";        }    }    function getComment()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"])) {            $uId = Auth::user()->id;            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $condition = ['placeId' => makeValidInput($_POST["placeId"]),                'kindPlaceId' => $kindPlaceId, 'confirm' => 1,                'visitorId' => $uId, 'activityId' => Activity::whereName('نظر')->first()->id];            $log = LogModel::where($condition)->first();            if ($log != null) {                $out = [];                $out["reviewText"] = $log->text;                $out["reviewTitle"] = $log->subject;                if ($log->pic != "")                    $out["reviewPic"] = URL::asset('userPhoto/comments/' . $kindPlaceId . '/' . $log->pic);                else                    $out["reviewPic"] = -1;                $comment = Comment::whereLogId($log->id)->first();                if ($comment != null) {                    $out["src"] = $comment->src;                    $out["placeStyle"] = $comment->placeStyleId;                    $out["seasonTrip"] = $comment->seasonTrip;                    echo json_encode($out);                }            }        }    }    function filterComments()    {        if (isset($_POST["filters"]) && isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) &&            isset($_POST["tag"]) && isset($_POST["page"])) {            $filters = $_POST["filters"];            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $activityId = Activity::whereName('نظر')->first()->id;            $rateActivityId = Activity::whereName('امتیاز')->first()->id;            $tag = makeValidInput($_POST["tag"]);            $season = [];            $rate = [];            $placeStyle = [];            $srcCity = [];            if ($filters != -1) {                for ($i = 0; $i < count($filters); $i++) {                    $filter = makeValidInput($filters[$i]);                    $subStr = explode('_', $filter);                    if (count($subStr) == 2) {                        switch ($subStr[0]) {                            case "season":                                $season[count($season)] = $subStr[1];                                break;                            case "rate":                                $rate[count($rate)] = $subStr[1];                                break;                            case "placeStyle":                                $placeStyle[count($placeStyle)] = $subStr[1];                                break;                            case "srcCity":                                $srcCity[count($srcCity)] = $subStr[1];                                break;                        }                    }                }            }            $sql = "";            if (count($season) > 0)                $sql .= " and (";            for ($i = 0; $i < count($season) - 1; $i++) {                $sql .= "seasonTrip = " . $season[$i] . " OR ";            }            if (count($season) > 0)                $sql .= "seasonTrip = " . $season[count($season) - 1] . ')';            if (count($placeStyle) > 0)                $sql .= " and (";            for ($i = 0; $i < count($placeStyle) - 1; $i++) {                $sql .= "placeStyleId = " . $placeStyle[$i] . " OR ";            }            if (count($placeStyle) > 0)                $sql .= "placeStyleId = " . $placeStyle[count($placeStyle) - 1] . ')';            if (count($srcCity) > 0)                $sql .= " and (";            for ($i = 0; $i < count($srcCity) - 1; $i++) {                $sql .= "src = '" . $srcCity[$i] . "' OR ";            }            if (count($srcCity) > 0)                $sql .= "src = '" . $srcCity[count($srcCity) - 1] . "')";            if (count($rate) > 0) {                $sql .= ' and visitorId in (';                $rates = DB::select('select avg(rate) as AVGRATE, logId from log, userOpinions WHERE log.id = logId and placeId = ' . $placeId . " and kindPlaceId = " . $kindPlaceId . " and activityId = " . Activity::whereName('امتیاز')->first()->id . " group by(visitorId)");                $first = true;                foreach ($rates as $itr) {                    $itr->AVGRATE = ceil($itr->AVGRATE);                    if (in_array($itr->AVGRATE, $rate)) {                        if (!$first)                            $sql .= ', ';                        else                            $first = false;                        $sql .= LogModel::whereId($itr->logId)->visitorId;                    }                }                if ($first == true) {                    $sql .= ' -1 ';                }                $sql .= ')';            }            if ($tag != -1)                $sql .= " and text LIKE '%$tag%'";            $sql .= " and status = 1 and confirm = 1";            $page = makeValidInput($_POST["page"]);            $sql .= " limit 6 offset " . (($page - 1) * 6);            $logs = DB::select('select log.id, visitorId, pic, text, subject, date from log, comment WHERE log.id = logId and placeId = ' . $placeId .                " and kindPlaceId = " . $kindPlaceId . " and ActivityId = " . $activityId .                $sql);            foreach ($logs as $log) {                $condition = ["activityId" => $activityId, 'visitorId' => $log->visitorId];                $log->comments = LogModel::where($condition)->count();                $condition = ["activityId" => $rateActivityId, 'visitorId' => $log->visitorId,                    'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];                $logId = LogModel::where($condition)->first()->id;                $log->rate = ceil(DB::select('Select AVG(rate) as avgRate from userOpinions WHERE logId = ' . $logId)[0]->avgRate);                $user = User::whereId($log->visitorId);                $log->visitorId = $user->username;                $userPic = $user->picture;                if (count(explode('.', $userPic)) == 2) {                    $log->visitorPic = URL::asset('userPhoto/' . $userPic);                } else {                    $defaultPic = DefaultPic::whereId($userPic);                    if ($defaultPic == null)                        $defaultPic = DefaultPic::first();                    $log->visitorPic = URL::asset('defaultPic/' . $defaultPic->name);                }                $condition = ["logId" => $log->id, "like_" => 1];                $log->likes = OpOnActivity::where($condition)->count();                $condition = ["logId" => $log->id, "dislike" => 1];                $log->dislikes = OpOnActivity::where($condition)->count();                if (!empty($log->pic))                    $log->pic = URL::asset('userPhoto/comments/' . $kindPlaceId . '/' . $log->pic);                else                    $log->pic = -1;                $log->date = convertDate($log->date);            }            echo json_encode($logs);        }    }    public function report()    {        if (isset($_POST["logId"])) {            $logId = makeValidInput($_POST["logId"]);            $logTmp = LogModel::whereId($logId);            $uId = Auth::user()->id;            $activityId = Activity::whereName('گزارش')->first()->id;            $condition = ["visitorId" => $uId, 'relatedTo' => $logId, 'activityId' => $activityId];            if (LogModel::where($condition)->count() == 0) {                $log = new LogModel();                $log->placeId = $logTmp->placeId;                $log->time = getToday()["time"];                $log->kindPlaceId = $logTmp->kindPlaceId;                $log->visitorId = $uId;                $log->date = date('Y-m-d');                $log->relatedTo = $logId;                $log->activityId = $activityId;                try {                    $log->save();                } catch (Exception $x) {                };            }        }    }    public function sendReport()    {        if (isset($_POST["logId"]) && isset($_POST["reports"]) && isset($_POST["customMsg"])) {            $logId = makeValidInput($_POST["logId"]);            $logTmp = LogModel::whereId($logId);            $reports = $_POST["reports"];            $customMsg = makeValidInput($_POST["customMsg"]);            $uId = Auth::user()->id;            $activityId = Activity::whereName('گزارش')->first()->id;            $condition = ["visitorId" => $uId, "activityId" => $activityId,                "relatedTo" => $logId, 'subject' => ''];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->visitorId = $uId;                $log->time = getToday()["time"];                $log->placeId = $logTmp->placeId;                $log->kindPlaceId = $logTmp->kindPlaceId;                $log->activityId = $activityId;                $log->relatedTo = $logId;                $log->date = date('Y-m-d');                $log->save();            }            $log->text = "";            $log->save();            $tmpLog = LogModel::whereId($logId);            $tmpLog->date = date('Y-m-d');            $tmpLog->save();            Report::whereLogId($log->id)->delete();            for ($i = 0; $i < count($reports); $i++) {                $report = makeValidInput($reports[$i]);                if ($report == -1) {                    $log->text = $customMsg;                    $log->save();                } else {                    $newReport = new Report();                    $newReport->logId = $log->id;                    $newReport->reportKind = $report;                    $newReport->save();                }            }            echo "ok";        }    }    public function seeAllAns($questionId, $mode = "", $logId = -1)    {        $hasLogin = true;        if (!Auth::check())            $hasLogin = false;        $log = LogModel::whereId($questionId);        if ($log == null || $log->confirm != 1)            return Redirect::to('profile');        $placeId = $log->placeId;        $kindPlaceId = $log->kindPlaceId;        switch ($kindPlaceId) {            case 1:            default:                $place = Amaken::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/amaken/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "amaken";                break;            case 3:                $place = Restaurant::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/restaurant/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "restaurant";                break;            case 4:                $place = Hotel::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/hotels/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "hotel";                break;            case 6:                $place = Majara::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/majara/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "majara";                break;            case 8:                $place = Adab::whereId($placeId);                if ($place->category == 3) {                    if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/' . $place->pic_1)))                        $placePic = URL::asset('_images/adab/ghazamahali/' . $place->file . '/' . $place->pic_1);                    else                        $placePic = URL::asset('_images/nopic/blank.jpg');                } else {                    if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/' . $place->pic_1)))                        $placePic = URL::asset('_images/adab/soghat/' . $place->file . '/' . $place->pic_1);                    else                        $placePic = URL::asset('_images/nopic/blank.jpg');                }                $placeMode = "adab";                break;        }        $city = Cities::whereId($place->cityId);        $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,            'activityId' => Activity::whereName('پاسخ')->first()->id,            'relatedTo' => $questionId];        $answers = LogModel::where($condition)->get();        foreach ($answers as $answer) {            $user = User::whereId($answer->visitorId);            $pic = $user->picture;            if (count(explode('.', $pic)) != 2) {                $defaultPic = DefaultPic::whereId($pic);                if ($defaultPic == null)                    $pic = URL::asset('defaultPic/' . $defaultPic->name);                else                    $pic = URL::asset('defaultPic/' . DefaultPic::first()->name);            } else {                $pic = URL::asset('userPhoto/' . $pic);            }            $condition = ['logId' => $answer->id, 'like_' => 1];            $answer->rate = OpOnActivity::where($condition)->count();            $condition = ['logId' => $answer->id, 'dislike' => 1];            $answer->rate -= OpOnActivity::where($condition)->count();            $answer->userPhoto = $pic;            $city = Cities::whereId($user->cityId);            $answer->city = $city->name;            $answer->state = State::whereId($city->stateId)->name;            $answer->visitorId = $user->username;            $answer->date = convertDate($answer->date);        }        $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,            'activityId' => Activity::whereName('نظر')->first()->id];        $reviews = LogModel::where($condition)->count();        $question = LogModel::whereId($questionId);        if ($question != null) {            $user = User::whereId($question->visitorId);            $pic = $user->picture;            if (count(explode('.', $pic)) != 2) {                $defaultPic = DefaultPic::whereId($pic);                if ($defaultPic == null)                    $pic = URL::asset('defaultPic/' . $defaultPic->name);                else                    $pic = URL::asset('defaultPic/' . DefaultPic::first()->name);            } else {                $pic = URL::asset('userPhoto/' . $pic);            }            $question->userPhoto = $pic;            $city = Cities::whereId($user->cityId);            $question->city = $city->name;            $question->state = State::whereId($city->stateId)->name;            $question->visitorId = $user->username;            $question->date = convertDate($question->date);        }        return view('questionList', array('placePic' => $placePic, 'city' => $city->name,            'state' => State::whereId($city->stateId)->name, 'placeId' => $placeId, 'placeName' => $place->name,            'kindPlaceId' => $kindPlaceId, 'answers' => $answers, 'mode' => $mode, 'logId' => $logId,            'rate' => getRate($placeId, $kindPlaceId)[1], 'hasLogin' => $hasLogin,            'reviews' => $reviews, 'question' => $question, 'placeMode' => $placeMode));    }    public function getPlaceStyles()    {        if (isset($_POST["kindPlaceId"]))            echo \GuzzleHttp\json_encode(PlaceStyle::whereKindPlaceId(makeValidInput($_POST["kindPlaceId"]))->get());    }    public function getSrcCities()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"])) {            echo \GuzzleHttp\json_encode(DB::select("select DISTINCT(src) from log, comment WHERE log.placeId = " . makeValidInput($_POST["placeId"]) . ' and ' .                'kindPlaceId = ' . makeValidInput($_POST["kindPlaceId"]) . ' and activityId = ' . Activity::whereName('نظر')->first()->id .                ' and logId = log.id and status = 1'));        }    }    public function getTags()    {        if (isset($_POST["kindPlaceId"]))            echo \GuzzleHttp\json_encode(Tag::where('kindPlaceId', '=', makeValidInput($_POST["kindPlaceId"]))->get());    }    public function showAllPlaces($placeId1, $kindPlaceId1, $placeId2 = "", $kindPlaceId2 = "", $placeId3 = "", $kindPlaceId3 = "", $placeId4 = "", $kindPlaceId4 = "", $mode = "", $err = "")    {        $hasLogin = true;        $kindPlaceIds = [$kindPlaceId1, $kindPlaceId2, $kindPlaceId3, $kindPlaceId4];        $placeIds = [$placeId1, $placeId2, $placeId3, $placeId4];        $uId = -1;        $bookMarks = [];        $ratesArr = [];        $saves = [];        $places = [];        $cityNames = [];        $stateNames = [];        $tagsArr = [];        $sitePhotosArr = [];        $placeModes = [];        $photosArr = [];        $validate = [true, true, true, true];        $nearbiesArr = [];        if (Auth::check())            $uId = Auth::user()->id;        else            $hasLogin = false;        for ($i = 0; $i < 4; $i++) {            if ($kindPlaceIds[$i] == "") {                $validate[$i] = false;                continue;            }            if ($kindPlaceIds[$i] != 1 && $kindPlaceIds[$i] != 3 && $kindPlaceIds[$i] != 4 &&                $kindPlaceIds[$i] != 8 && $kindPlaceIds[$i] != 6)                return Redirect::route('main');            switch ($kindPlaceIds[$i]) {                case 1:                default:                    $place = Amaken::whereId($placeIds[$i]);                    $imgPath = "amaken";                    $imgPath2 = "amaken";                    break;                case 3:                    $place = Restaurant::whereId($placeIds[$i]);                    $imgPath = "restaurant";                    $imgPath2 = "restaurant";                    break;                case 4:                    $place = Hotel::whereId($placeIds[$i]);                    $imgPath = "hotels";                    $imgPath2 = "hotel";                    break;                case 6:                    $place = Majara::whereId($placeIds[$i]);                    $imgPath = "majara";                    $imgPath2 = "majara";                    break;                case 8:                    $place = Adab::whereId($placeIds[$i]);                    if ($place->category == 3) {                        $imgPath = "adab/ghazamahali";                        $imgPath2 = "ghazamahali";                    } else {                        $imgPath = "adab/soghat";                        if ($place->category == 1)                            $imgPath2 = "soghat";                        else                            $imgPath2 = "sanaye";                    }                    break;            }            if ($place == null)                return Redirect::route('main');            $kindPlaceId = $kindPlaceIds[$i];            if ($hasLogin) {                $activityId = Activity::whereName('مشاهده')->first()->id;                $condition = ['visitorId' => $uId, 'placeId' => $placeIds[$i], 'kindPlaceId' => $kindPlaceId,                    'activityId' => $activityId];                $log = LogModel::where($condition)->first();                if ($log == null) {                    $log = new LogModel();                    $log->activityId = $activityId;                    $log->time = getToday()["time"];                    $log->placeId = $placeIds[$i];                    $log->kindPlaceId = $kindPlaceId;                    $log->visitorId = $uId;                    $log->date = date('Y-m-d');                    $log->save();                } else {                    $log->date = date('Y-m-d');                    $log->save();                }            }            $placeModes[$i] = $imgPath2;            $bookMark = false;            $condition = ['visitorId' => $uId, 'activityId' => Activity::whereName("نشانه گذاری")->first()->id,                'placeId' => $placeIds[$i], 'kindPlaceId' => $kindPlaceId];            if (LogModel::where($condition)->count() > 0)                $bookMark = true;            $bookMarks[$i] = $bookMark;            $ratesArr[$i] = getRate($placeIds[$i], $kindPlaceId);            $save = false;            $count = DB::select("select count(*) as tripPlaceNum from trip, tripPlace WHERE tripPlace.placeId = " . $placeIds[$i] . " and tripPlace.kindPlaceId = " . $kindPlaceId . " and tripPlace.tripId = trip.id and trip.uId = " . $uId);            if ($count[0]->tripPlaceNum > 0)                $save = true;            $saves[$i] = $save;            if ($kindPlaceId != 8) {                $city = Cities::whereId($place->cityId);                $state = State::whereId($city->stateId)->name;            } else {                $city = State::whereId($place->stateId);                $state = $city;            }            $cityNames[$i] = $city->name;            $stateNames[$i] = $state;            $photos = [];            if (!empty($place->pic_1)) {                if (file_exists((__DIR__ . '/../../../../assets/_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_1)))                    $photos[count($photos)] = URL::asset('_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_1);                else                    $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            } else                $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            if (!empty($place->pic_2)) {                if (file_exists((__DIR__ . '/../../../../assets/_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_2)))                    $photos[count($photos)] = URL::asset('_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_2);                else                    $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            }            if (!empty($place->pic_3)) {                if (file_exists((__DIR__ . '/../../../../assets/_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_3)))                    $photos[count($photos)] = URL::asset('_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_3);                else                    $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            }            if (!empty($place->pic_4)) {                if (file_exists((__DIR__ . '/../../../../assets/_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_4)))                    $photos[count($photos)] = URL::asset('_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_4);                else                    $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            }            if (!empty($place->pic_5)) {                if (file_exists((__DIR__ . '/../../../../assets/_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_5)))                    $photos[count($photos)] = URL::asset('_images/' . $imgPath . '/' . $place->file . '/' . $place->pic_5);                else                    $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            }            $sitePhotosArr[$i] = count($photos);            $activityId = Activity::whereName('عکس')->first()->id;            $tmp = DB::select("select text from log WHERE confirm = 1 and activityId = " . $activityId . " and placeId = " . $placeIds[$i] . " and kindPlaceId = " . $kindPlaceId . " and pic <> 0");            foreach ($tmp as $itr)                $photos[count($photos)] = URL::asset('userPhoto/' . $imgPath2 . '/l-' . $itr->text);            $photosArr[$i] = $photos;            $places[$i] = $place;            if ($kindPlaceId == 8) {                $brands = [];                if (!empty($place->brand_name_1)) {                    $brands[count($brands)] = $place->brand_name_1 . "<br/>" . $place->des_name_1;                }                if (!empty($place->brand_name_2)) {                    $brands[count($brands)] = $place->brand_name_2 . "<br/>" . $place->des_name_2;                }                if (!empty($place->brand_name_3)) {                    $brands[count($brands)] = $place->brand_name_3 . "<br/>" . $place->des_name_3;                }                if (!empty($place->brand_name_4)) {                    $brands[count($brands)] = $place->brand_name_4 . "<br/>" . $place->des_name_4;                }                if (!empty($place->brand_name_5)) {                    $brands[count($brands)] = $place->brand_name_5 . "<br/>" . $place->des_name_5;                }                if (!empty($place->brand_name_6)) {                    $brands[count($brands)] = $place->brand_name_6 . "<br/>" . $place->des_name_6;                }                $nearbiesArr[$i] = $brands;            } else {                $nearbiesArr[$i] = [];            }        }        return view('showAllPlaces', array('places' => $places, 'saves' => $saves, 'cityNames' => $cityNames, 'nearbies' => $nearbiesArr,            'tags' => $tagsArr, 'stateNames' => $stateNames, 'avgRates' => $ratesArr, 'photos' => $photosArr,            'kindPlaceIds' => $kindPlaceIds, 'mode' => $mode, 'rates' => $ratesArr, 'sitePhotos' => $sitePhotosArr,            'hasLogin' => $hasLogin, 'bookMarks' => $bookMarks, 'childAge' => ConfigModel::first()->childAge, 'err' => $err,            'validate' => $validate, 'placeMode' => 'policies', 'placeModes' => $placeModes));    }    public function showUserBriefDetail()    {        if (isset($_POST["username"])) {            $username = makeValidInput($_POST['username']);            if ($username == 'سایت')                return;            $user = User::whereUserName($username)->first();            $city = Cities::whereId($user->cityId);            if ($city == null) {                $out["city"] = "نامشخص";                $out["state"] = "نامشخص";            } else {                $out["city"] = $city->name;                $out["state"] = State::whereId($city->stateId)->name;            }            $rateActivity = Activity::whereName('امتیاز')->first()->id;            $condition = ['visitorId' => $user->id, 'activityId' => $rateActivity];            $out["rates"] = LogModel::where($condition)->count();            $condition = ['visitorId' => $user->id, 'activityId' => Activity::whereName('مشاهده')->first()->id];            $out["seen"] = LogModel::where($condition)->count();            $activityId = Activity::whereName('پاسخ')->first()->id;            $out["likes"] = DB::select('select count(*) as countNum from log, opOnActivity WHERE logId = log.id and visitorId = ' . $user->id . ' and activityId = ' . $activityId . ' and like_ = 1')[0]->countNum;            $out["dislikes"] = DB::select('select count(*) as countNum from log, opOnActivity WHERE logId = log.id and visitorId = ' . $user->id . ' and activityId = ' . $activityId . ' and dislike = 1')[0]->countNum;            $out["excellent"] = DB::select("SELECT COUNT(*) as countNum FROM log WHERE visitorId = " . $user->id . " and activityId = " . $rateActivity . " and (SELECT AVG(rate) FROM userOpinions WHERE logId = log.id) > 4")[0]->countNum;            $out["veryGood"] = DB::select("SELECT COUNT(*) as countNum FROM log WHERE visitorId = " . $user->id . " and activityId = " . $rateActivity . " and (SELECT AVG(rate) FROM userOpinions WHERE logId = log.id) > 3")[0]->countNum - $out["excellent"];            $out["average"] = DB::select("SELECT COUNT(*) as countNum FROM log WHERE visitorId = " . $user->id . " and activityId = " . $rateActivity . " and (SELECT AVG(rate) FROM userOpinions WHERE logId = log.id) > 2")[0]->countNum - $out["veryGood"] - $out["excellent"];            $out["bad"] = DB::select("SELECT COUNT(*) as countNum FROM log WHERE visitorId = " . $user->id . " and activityId = " . $rateActivity . " and (SELECT AVG(rate) FROM userOpinions WHERE logId = log.id) > 1")[0]->countNum - $out["veryGood"] - $out["average"] - $out["excellent"];            $out["veryBad"] = DB::select("SELECT COUNT(*) as countNum FROM log WHERE visitorId = " . $user->id . " and activityId = " . $rateActivity . " and (SELECT AVG(rate) FROM userOpinions WHERE logId = log.id) > 0")[0]->countNum - $out["veryGood"] - $out["average"] - $out["excellent"] - $out["bad"];            $out["level"] = nearestLevel($user->id)[0]->name;            $out["created"] = convertDate($user->created_at);            echo json_encode($out);        }    }    public function alaki()    {        $objPHPExcel = new PHPExcel();        $objPHPExcel->getProperties()->setCreator("Ayandehsazan");        $objPHPExcel->getProperties()->setLastModifiedBy("Ayandehsazan");        $objPHPExcel->getProperties()->setTitle("Office 2007 XLSX Test Document");        $objPHPExcel->getProperties()->setSubject("Office 2007 XLSX Test Document");        $objPHPExcel->getProperties()->setDescription("Test document for Office 2007 XLSX, generated using PHP classes.");        $objPHPExcel->setActiveSheetIndex(0);        $objPHPExcel->getActiveSheet()->SetCellValue('D1', 'نام شهر');        $objPHPExcel->getActiveSheet()->SetCellValue('C1', 'نام هتل');        $objPHPExcel->getActiveSheet()->SetCellValue('B1', 'kindPlaceId');        $objPHPExcel->getActiveSheet()->SetCellValue('A1', 'placeId');        $counter = 2;        for ($i = 1; $i <= 6; $i++) {            if (Place::whereId($i)->name != "هتل" && Place::whereId($i)->name != "رستوران" && Place::whereId($i)->name != "اماکن")                continue;            switch (Place::whereId($i)->name) {                case "هتل":                    $hotels = Hotel::all();                    foreach ($hotels as $hotel) {                        $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($counter), $hotel->id);                        $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($counter), $i);                        $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($counter), $hotel->name);                        $objPHPExcel->getActiveSheet()->SetCellValue('D' . ($counter++), Cities::whereId($hotel->cityId)->name);                    }                    break;                case "رستوران":                    $r = Restaurant::all();                    foreach ($r as $itr) {                        $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($counter), $itr->id);                        $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($counter), $i);                        $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($counter), $itr->name);                        $objPHPExcel->getActiveSheet()->SetCellValue('D' . ($counter++), Cities::whereId($itr->cityId)->name);                    }                    break;                case "اماکن":                    $r = Amaken::all();                    foreach ($r as $itr) {                        $objPHPExcel->getActiveSheet()->SetCellValue('A' . ($counter), $itr->id);                        $objPHPExcel->getActiveSheet()->SetCellValue('B' . ($counter), $i);                        $objPHPExcel->getActiveSheet()->SetCellValue('C' . ($counter), $itr->name);                        $objPHPExcel->getActiveSheet()->SetCellValue('D' . ($counter++), Cities::whereId($itr->cityId)->name);                    }                    break;            }        }        $fileName = "report.xlsx";        $objPHPExcel->getActiveSheet()->setTitle('My_Simple');        $objWriter = new PHPExcel_Writer_Excel2007($objPHPExcel);        $objWriter->save($fileName);        echo "<a href='$fileName' download>دانلود فایل اکسل گزارش</a>";        return;    }    public function showReview($logId)    {        $log = LogModel::whereId($logId);        if ($log == null || $log->confirm != 1)            return Redirect::to('profile');        $address = "";        $phone = "";        $site = "";        $hasLogin = true;        $placePhotosCount = 0;        if (Auth::check())            $hasLogin = false;        $comment = Comment::whereLogId($logId)->first();        switch ($log->kindPlaceId) {            case 1:            default:                $place = Amaken::whereId($log->placeId);                $address = $place->address;                if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/amaken/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "amaken";                $state = State::whereId(Cities::whereId($place->cityId)->stateId)->name;                break;            case 3:                $place = Restaurant::whereId($log->placeId);                $address = $place->address;                if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/restaurant/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "restaurant";                $state = State::whereId(Cities::whereId($place->cityId)->stateId)->name;                break;            case 4:                $place = Hotel::whereId($log->placeId);                $address = $place->address;                if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/hotels/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "hotel";                $state = State::whereId(Cities::whereId($place->cityId)->stateId)->name;                break;            case 6:                $place = Majara::whereId($log->placeId);                $address = $place->address;                if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/' . $place->pic_1)))                    $placePic = URL::asset('_images/majara/' . $place->file . '/' . $place->pic_1);                else                    $placePic = URL::asset('_images/nopic/blank.jpg');                $placeMode = "majara";                $state = State::whereId($place->cityId)->name;                break;            case 8:                $place = Adab::whereId($log->placeId);                if ($place->category == 3) {                    if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/' . $place->pic_1)))                        $placePic = URL::asset('_images/adab/ghazamahali/' . $place->file . '/' . $place->pic_1);                    else                        $placePic = URL::asset('_images/nopic/blank.jpg');                } else {                    if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/' . $place->pic_1)))                        $placePic = URL::asset('_images/adab/soghat/' . $place->file . '/' . $place->pic_1);                    else                        $placePic = URL::asset('_images/nopic/blank.jpg');                }                $placeMode = "adab";                $state = State::whereId($place->stateId)->name;                break;        }        if ($place->pic_1 != "")            $placePhotosCount++;        if ($place->pic_2 != "")            $placePhotosCount++;        if ($place->pic_3 != "")            $placePhotosCount++;        if ($place->pic_4 != "")            $placePhotosCount++;        if ($place->pic_5 != "")            $placePhotosCount++;        $condition = ['placeId' => $log->placeId, 'kindPlaceId' => $log->kindPlaceId, 'confirm' => 1,            'activityId' => Activity::whereName('عکس')->first()->id];        $userPhotosCount = LogModel::where($condition)->count();        $condition = ['placeId' => $log->placeId, 'kindPlaceId' => $log->kindPlaceId,            'activityId' => Activity::whereName('امتیاز')->first()->id,            'visitorId' => $log->visitorId];        $logId = LogModel::where($condition)->first()->id;        $log->rate = ceil(DB::select('select avg(rate) as avgRate from userOpinions where logId = ' . $logId)[0]->avgRate);        $condition = ['activityId' => Activity::whereName('نظر')->first()->id,            'visitorId' => $log->visitorId, 'confirm' => 1];        $log->commentsCount = LogModel::where($condition)->count();        $user = User::whereId($log->visitorId);        $log->visitorId = $user->username;        $city = Cities::whereId($user->cityId);        if (!empty($log->pic) && file_exists(__DIR__ . '/../../../../assets/userPhoto/comments/' . $log->kindPlaceId . '/' . $log->pic)) {            $log->userPic = URL::asset('userPhoto/comments/' . $log->kindPlaceId . '/' . $log->pic);        }        $log->city = $city->name;        $log->date = convertDate($log->date);        $log->state = State::whereId($city->stateId)->name;        $log->visitorPic = $user->picture;        if (count(explode('.', $log->visitorPic)) == 1) {            if (!empty(DefaultPic::whereId($log->visitorPic)))                $log->visitorPic = URL::asset('defaultPic/' . DefaultPic::whereId($log->visitorPic)->name);            else                $log->visitorPic = URL::asset('defaultPic/' . DefaultPic::first()->name);        } else {            $log->visitorPic = URL::asset('userPhoto/' . $log->visitorPic);        }        $condition = ['logId' => $log->id, 'like_' => 1];        $likes = OpOnActivity::where($condition)->count();        $condition = ['logId' => $log->id, 'dislike' => 1];        $dislikes = OpOnActivity::where($condition)->count();        $activityId = Activity::whereName('نظر')->first()->id;        $tags = DB::select('SELECT DISTINCT(subject), id FROM log WHERE confirm = 1 and activityId = ' . $activityId . ' and placeId = ' . $log->placeId . ' and kindPlaceId = ' . $log->kindPlaceId . ' ORDER BY date DESC LIMIT 0, 10');        return view('showReview', array('log' => $log, 'comment' => $comment, 'hasLogin' => $hasLogin, 'state' => $state,            'placeName' => $place->name, 'placePic' => $placePic, 'address' => $address, 'phone' => $phone, 'site' => $site, 'userPhotosCount' => $userPhotosCount, 'sitePhotosCount' => $placePhotosCount, 'likes' => $likes, 'dislikes' => $dislikes, 'rate' => getRate($log->placeId, $log->kindPlaceId)[1], 'tags' => $tags, 'placeMode' => $placeMode));    }    public function getPhotos()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"]) && isset($_POST["picItemId"])) {            $placeId = makeValidInput($_POST["placeId"]);            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $picItemId = makeValidInput($_POST["picItemId"]);            $activityId = Activity::whereName('عکس')->first()->id;            $logs = [];            if ($picItemId != -2) {                if ($picItemId == -1) {                    $condition = ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                        'activityId' => $activityId];                    $logs = LogModel::where($condition)->select('text', 'visitorId')->get();                } else if ($picItemId == -3) {                    $logs = DB::select("select text, visitorId FROM log WHERE placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and activityId = " . $activityId);                } else                    $logs = DB::select("select text, visitorId FROM log WHERE placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and activityId = " . $activityId . " and pic = " . $picItemId);            }            $arr = [];            $count = 0;            $photoFilters = DB::select("select name, id, (SELECT count(*) FROM log WHERE placeId = " . $placeId . " and log.kindPlaceId = " . $kindPlaceId . " and activityId = " . $activityId . " and pic = picItems.id) as countNum FROM picItems WHERE kindPlaceId = " . $kindPlaceId);            $userPic = URL::asset('images/logo.svg');            switch ($kindPlaceId) {                case 1:                default:                    if ($picItemId == -1 || $picItemId == -2) {                        $place = Amaken::whereId($placeId);                        if ($place->pic_1 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/s-1.jpg')))                                $arr[$count]['pic'] = URL::asset('_images/amaken/' . $place->file . '/s-1.jpg');                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/t-1.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/amaken/' . $place->file . '/t-1.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]['alt'] = $place->alt1;                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_2 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/s-2.jpg' )))                                $arr[$count]['pic'] = URL::asset('_images/amaken/' . $place->file . '/s-2.jpg' );                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/t-2.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/amaken/' . $place->file . '/t-2.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt2;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_3 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/s-3.jpg' )))                                $arr[$count]['pic'] = URL::asset('_images/amaken/' . $place->file . '/s-3.jpg' );                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/t-3.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/amaken/' . $place->file . '/t-3.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt3;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_4 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/s-4.jpg')))                                $arr[$count]['pic'] = URL::asset('_images/amaken/' . $place->file . '/s-4.jpg');                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/t-4.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/amaken/' . $place->file . '/t-4.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt4;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_5 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/s-5.jpg')))                                $arr[$count]['pic'] = URL::asset('_images/amaken/' . $place->file . '/s-5.jpg');                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place->file . '/t-5.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/amaken/' . $place->file . '/t-5.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt5;                            $arr[$count++]["ownerPic"] = $userPic;                        }                    }                    foreach ($logs as $log) {                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/amaken/l-' . $log->text))                            $arr[$count]["pic"] = URL::asset("userPhoto/amaken/l-" . $log->text);                        else                            $arr[$count]["pic"] = URL::asset("_images/nopic/blank.jpg");                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/amaken/s-' . $log->text))                            $arr[$count]["picT"] = URL::asset("userPhoto/amaken/s-" . $log->text);                        else                            $arr[$count]["picT"] = URL::asset("_images/nopic/blank.jpg");                        $user = User::whereId($log->visitorId);                        $arr[$count]["owner"] = $user->username;                        $userPic = $user->picture;                        if (count(explode('.', $userPic)) == 2)                            $userPic = URL::asset("userPhoto/" . $userPic);                        else {                            $defaultPic = DefaultPic::whereId($userPic);                            if ($defaultPic == null || count($defaultPic) == 0)                                $defaultPic = DefaultPic::first();                            $userPic = URL::asset('defaultPic/' . $defaultPic->name);                        }                        $arr[$count++]["ownerPic"] = $userPic;                    }                    break;                case 3:                    if ($picItemId == -1 || $picItemId == -2) {                        $place = Restaurant::whereId($placeId);                        if ($place->pic_1) {                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/s-1.jpg')))                                $arr[$count]['pic'] = URL::asset('_images/restaurant/' . $place->file . '/s-1.jpg');                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/t-1.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/restaurant/' . $place->file . '/t-1.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/restaurant');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt1;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_2) {                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/s-2.jpg' )))                                $arr[$count]['pic'] = URL::asset('_images/restaurant/' . $place->file . '/s-2.jpg' );                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/t-2.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/restaurant/' . $place->file . '/t-2.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/restaurant');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt2;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_3) {                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/s-3.jpg' )))                                $arr[$count]['pic'] = URL::asset('_images/restaurant/' . $place->file . '/s-3.jpg' );                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/t-3.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/restaurant/' . $place->file . '/t-3.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/restaurant');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt3;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_4) {                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/s-4.jpg')))                                $arr[$count]['pic'] = URL::asset('_images/restaurant/' . $place->file . '/s-4.jpg');                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/t-4.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/restaurant/' . $place->file . '/t-4.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/restaurant');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt4;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_5) {                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/s-5.jpg')))                                $arr[$count]['pic'] = URL::asset('_images/restaurant/' . $place->file . '/s-5.jpg');                            else                                $arr[$count]['pic'] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place->file . '/t-5.jpg')))                                $arr[$count]['picT'] = URL::asset('_images/restaurant/' . $place->file . '/t-5.jpg');                            else                                $arr[$count]['picT'] = URL::asset('_images/restaurant');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt5;                            $arr[$count++]["ownerPic"] = $userPic;                        }                    }                    foreach ($logs as $log) {                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/restaurant/l-' . $log->text))                            $arr[$count]["pic"] = URL::asset("userPhoto/restaurant/l-" . $log->text);                        else                            $arr[$count]["pic"] = URL::asset("_images/nopic/blank.jpg");                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/restaurant/s-' . $log->text))                            $arr[$count]["picT"] = URL::asset("userPhoto/restaurant/s-" . $log->text);                        else                            $arr[$count]["picT"] = URL::asset("_images/nopic/blank.jpg");                        $user = User::whereId($log->visitorId);                        $arr[$count]["owner"] = $user->username;                        $userPic = $user->picture;                        if (count(explode('.', $userPic)) == 2)                            $userPic = URL::asset("userPhoto/" . $userPic);                        else {                            $defaultPic = DefaultPic::whereId($userPic);                            if ($defaultPic == null || count($defaultPic) == 0)                                $defaultPic = DefaultPic::first();                            $userPic = URL::asset('defaultPic/' . $defaultPic->name);                        }                        $arr[$count++]["ownerPic"] = $userPic;                    }                    break;                case 4:                    if ($picItemId == -1 || $picItemId == -2) {                        $place = Hotel::whereId($placeId);                        if ($place->pic_1 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/s-1.jpg')))                                $arr[$count]["pic"] = URL::asset('_images/hotels/' . $place->file . '/s-1.jpg');                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/t-1.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/hotels/' . $place->file . '/t-1.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt1;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_2 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/s-2.jpg' )))                                $arr[$count]["pic"] = URL::asset('_images/hotels/' . $place->file . '/s-2.jpg' );                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/t-2.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/hotels/' . $place->file . '/t-2.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt2;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_3 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/s-3.jpg' )))                                $arr[$count]["pic"] = URL::asset('_images/hotels/' . $place->file . '/s-3.jpg' );                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/t-3.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/hotels/' . $place->file . '/t-3.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt3;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_4 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/s-4.jpg')))                                $arr[$count]["pic"] = URL::asset('_images/hotels/' . $place->file . '/s-4.jpg');                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/t-4.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/hotels/' . $place->file . '/t-4.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt4;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_5 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/s-5.jpg')))                                $arr[$count]["pic"] = URL::asset('_images/hotels/' . $place->file . '/s-5.jpg');                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/t-5.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/hotels/' . $place->file . '/t-5.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt5;                            $arr[$count++]["ownerPic"] = $userPic;                        }                    }                    foreach ($logs as $log) {                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/hotels/l-' . $log->text))                            $arr[$count]["pic"] = URL::asset("userPhoto/hotels/l-" . $log->text);                        else                            $arr[$count]["pic"] = URL::asset("_images/nopic/blank.jpg");                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/hotels/s-' . $log->text))                            $arr[$count]["picT"] = URL::asset("userPhoto/hotels/s-" . $log->text);                        else                            $arr[$count]["picT"] = URL::asset("_images/nopic/blank.jpg");                        $user = User::whereId($log->visitorId);                        $arr[$count]["owner"] = $user->username;                        $userPic = $user->picture;                        if (count(explode('.', $userPic)) == 2)                            $userPic = URL::asset("userPhoto/" . $userPic);                        else {                            $defaultPic = DefaultPic::whereId($userPic);                            if ($defaultPic == null)                                $defaultPic = DefaultPic::first();                            $userPic = URL::asset('defaultPic/' . $defaultPic->name);                        }                        $arr[$count++]["ownerPic"] = $userPic;                    }                    break;                case 6:                    if ($picItemId == -1 || $picItemId == -2) {                        $place = Majara::whereId($placeId);                        if ($place->pic_1 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/s-1.jpg')))                                $arr[$count]["pic"] = URL::asset('_images/majara/' . $place->file . '/s-1.jpg');                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/t-1.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/majara/' . $place->file . '/t-1.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_1 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/s-2.jpg' )))                                $arr[$count]["pic"] = URL::asset('_images/majara/' . $place->file . '/s-2.jpg' );                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/t-2.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/majara/' . $place->file . '/t-2.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt2;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_1 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/s-3.jpg' )))                                $arr[$count]["pic"] = URL::asset('_images/majara/' . $place->file . '/s-3.jpg' );                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/t-3.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/majara/' . $place->file . '/t-3.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt3;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_1 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/s-4.jpg')))                                $arr[$count]["pic"] = URL::asset('_images/majara/' . $place->file . '/s-4.jpg');                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/t-4.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/majara/' . $place->file . '/t-4.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt4;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_1 != "") {                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/s-5.jpg')))                                $arr[$count]["pic"] = URL::asset('_images/majara/' . $place->file . '/s-5.jpg');                            else                                $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place->file . '/t-5.jpg')))                                $arr[$count]["picT"] = URL::asset('_images/majara/' . $place->file . '/t-5.jpg');                            else                                $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt5;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                    }                    foreach ($logs as $log) {                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/majara/l-' . $log->text))                            $arr[$count]["pic"] = URL::asset("userPhoto/majara/l-" . $log->text);                        else                            $arr[$count]["pic"] = URL::asset("_images/nopic/blank.jpg");                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/majara/s-' . $log->text))                            $arr[$count]["picT"] = URL::asset("userPhoto/majara/s-" . $log->text);                        else                            $arr[$count]["picT"] = URL::asset("_images/nopic/blank.jpg");                        $user = User::whereId($log->visitorId);                        $arr[$count]["owner"] = $user->username;                        $userPic = $user->picture;                        if (count(explode('.', $userPic)) == 2)                            $userPic = URL::asset("userPhoto/" . $userPic);                        else {                            $defaultPic = DefaultPic::whereId($userPic);                            if ($defaultPic == null || count($defaultPic) == 0)                                $defaultPic = DefaultPic::first();                            $userPic = URL::asset('defaultPic/' . $defaultPic->name);                        }                        $arr[$count++]["ownerPic"] = $userPic;                    }                    break;                case 8:                    if ($picItemId == -1 || $picItemId == -2) {                        $place = Adab::whereId($placeId);                        if ($place->pic_1 != "") {                            if ($place->category == 3) {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/s-1.jpg')))                                    $arr[$count]["pic"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/s-1.jpg');                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/t-1.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/t-1.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            } else {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/s-1.jpg')))                                    $arr[$count]["pic"] = URL::asset('_images/adab/soghat/' . $place->file . '/s-1.jpg');                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/t-1.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/soghat/' . $place->file . '/t-1.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            }                            $arr[$count]['alt'] = $place->alt1;                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_2 != "") {                            if ($place->category == 3) {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/s-2.jpg' )))                                    $arr[$count]["pic"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/s-2.jpg' );                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/t-2.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/t-2.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            } else {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/s-2.jpg' )))                                    $arr[$count]["pic"] = URL::asset('_images/adab/soghat/' . $place->file . '/s-2.jpg' );                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/t-2.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/soghat/' . $place->file . '/t-2.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            }                            $arr[$count]['alt'] = $place->alt2;                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_3 != "") {                            if ($place->category == 3) {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/s-3.jpg' )))                                    $arr[$count]["pic"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/s-3.jpg' );                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/t-3.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/t-3.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            } else {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/s-3.jpg' )))                                    $arr[$count]["pic"] = URL::asset('_images/adab/soghat/' . $place->file . '/s-3.jpg' );                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/t-3.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/soghat/' . $place->file . '/t-3.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            }                            $arr[$count]["filter"] = -1;                            $arr[$count]["owner"] = "سایت";                            $arr[$count]['alt'] = $place->alt3;                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_4 != "") {                            if ($place->category == 3) {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/s-4.jpg')))                                    $arr[$count]["pic"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/s-4.jpg');                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/t-4.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/t-4.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            } else {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/s-4.jpg')))                                    $arr[$count]["pic"] = URL::asset('_images/adab/soghat/' . $place->file . '/s-4.jpg');                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/t-4.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/soghat/' . $place->file . '/t-4.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            }                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt4;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                        if ($place->pic_5 != "") {                            if ($place->category == 3) {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/s-5.jpg')))                                    $arr[$count]["pic"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/s-5.jpg');                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place->file . '/t-5.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/ghazamahali/' . $place->file . '/t-5.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            } else {                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/s-5.jpg')))                                    $arr[$count]["pic"] = URL::asset('_images/adab/soghat/' . $place->file . '/s-5.jpg');                                else                                    $arr[$count]["pic"] = URL::asset('_images/nopic/blank.jpg');                                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place->file . '/t-5.jpg')))                                    $arr[$count]["picT"] = URL::asset('_images/adab/soghat/' . $place->file . '/t-5.jpg');                                else                                    $arr[$count]["picT"] = URL::asset('_images/nopic/blank.jpg');                            }                            $arr[$count]["filter"] = -1;                            $arr[$count]['alt'] = $place->alt5;                            $arr[$count]["owner"] = "سایت";                            $arr[$count++]["ownerPic"] = $userPic;                        }                    }                    foreach ($logs as $log) {                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/adab/l-' . $log->text))                            $arr[$count]["pic"] = URL::asset("userPhoto/adab/l-" . $log->text);                        else                            $arr[$count]["pic"] = URL::asset("_images/nopic/blank.jpg");                        if (file_exists(__DIR__ . '/../../../../assets/userPhoto/adab/s-' . $log->text))                            $arr[$count]["picT"] = URL::asset("userPhoto/adab/s-" . $log->text);                        else                            $arr[$count]["picT"] = URL::asset("_images/nopic/blank.jpg");                        $user = User::whereId($log->visitorId);                        $arr[$count]["owner"] = $user->username;                        $userPic = $user->picture;                        if (count(explode('.', $userPic)) == 2)                            $userPic = URL::asset("userPhoto/" . $userPic);                        else {                            $defaultPic = DefaultPic::whereId($userPic);                            if ($defaultPic == null || count($defaultPic) == 0)                                $defaultPic = DefaultPic::first();                            $userPic = URL::asset('defaultPic/' . $defaultPic->name);                        }                        $arr[$count++]["ownerPic"] = $userPic;                    }                    break;            }            echo json_encode(["pics" => $arr, "filters" => $photoFilters]);        }    }    public function addPhotoToPlace($placeId, $kindPlaceId) {        $uId = Auth::user()->id;        $err = "";        if (isset($_POST["url"]) && isset($_POST["url2"]) && isset($_POST["fileName"])            && isset($_POST["filter"]) && isset($_POST["desc"])) {            switch ($kindPlaceId) {                case 4:                default:                    $targetFile = __DIR__ . "/../../../../assets/userPhoto/hotels/";                    break;                case 1:                    $targetFile = __DIR__ . "/../../../../assets/userPhoto/amaken/";                    break;                case 3:                    $targetFile = __DIR__ . "/../../../../assets/userPhoto/restaurant/";                    break;                case 6:                    $targetFile = __DIR__ . "/../../../../assets/userPhoto/majara/";                    break;                case 8:                    $targetFile = __DIR__ . "/../../../../assets/userPhoto/adab/";                    break;            }            $fileName = makeValidInput($_POST["fileName"]);            if (file_exists($targetFile . 's-' . $fileName) || file_exists($targetFile . 'l-' . $fileName)) {                $count = 2;                while (file_exists($targetFile . 's-' . $count . $fileName) || file_exists($targetFile . 'l-' . $count . $fileName))                    $count++;                $fileName = $count . $fileName;            }            copy(makeValidInput($_POST["url"]), $targetFile . 'l-' . $fileName);            copy(makeValidInput($_POST["url2"]), $targetFile . 's-' . $fileName);            $desc = makeValidInput($_POST["desc"]);            if ($desc == -1)                $desc = "";            $log = new LogModel();            $log->visitorId = $uId;            $log->time = getToday()["time"];            $log->placeId = $placeId;            $log->kindPlaceId = $kindPlaceId;            $log->text = $fileName;            $log->subject = $desc;            $log->date = date('Y-m-d');            $log->activityId = Activity::whereName('عکس')->first()->id;            $log->pic = makeValidInput($_POST["filter"]);            try {                $log->save();                switch ($kindPlaceId) {                    case 4:                        echo \GuzzleHttp\json_encode(['status' => 'ok', 'url' => route('hotelDetails', ['placeId' => $placeId, 'placeName' => Hotel::whereId($placeId)->name, 'mode' => 'addPhotoSuccessfully'])]);                        break;                    case 1:                        echo \GuzzleHttp\json_encode(['status' => 'ok', 'url' => route('amakenDetails', ['placeId' => $placeId, 'placeName' => Amaken::whereId($placeId)->name, 'mode' => 'addPhotoSuccessfully'])]);                        break;                    case 3:                        echo \GuzzleHttp\json_encode(['status' => 'ok', 'url' => route('restaurantDetails', ['placeId' => $placeId, 'placeName' => Restaurant::whereId($placeId)->name, 'mode' => 'addPhotoSuccessfully'])]);                        break;                    case 6:                        echo \GuzzleHttp\json_encode(['status' => 'ok', 'url' => route('majaraDetails', ['placeId' => $placeId, 'placeName' => Majara::whereId($placeId)->name, 'mode' => 'addPhotoSuccessfully'])]);                        break;                    case 8:                        echo \GuzzleHttp\json_encode(['status' => 'ok', 'url' => route('adabDetails', ['placeId' => $placeId, 'placeName' => Adab::whereId($placeId)->name, 'mode' => 'addPhotoSuccessfully'])]);                        break;                }                return;            } catch (Exception $e) {            };        }        echo \GuzzleHttp\json_encode(['status' => 'nok', 'err' => $err]);    }    public function addPhotoToComment($placeId, $kindPlaceId)    {        if (!Auth::check())            return Redirect::to(route('hotelDetails', ['placeId' => $placeId, 'placeName' => Hotel::whereId($placeId)->name]));        $uId = Auth::user()->id;        $err = "";        if (isset($_FILES["photo"]) && !empty($_FILES["photo"]["name"])) {            $condition = ["visitorId" => $uId, 'activityId' => Activity::whereName('نظر')->first()->id,                'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];            $log = LogModel::where($condition)->first();            if ($log == null) {                return $this->writeReview($placeId, $kindPlaceId, "شما باید ابتدا نقد خود را ارسال کرده و سپس به آن عکس اضافه کنید");            }            if (!file_exists(__DIR__ . "/../../../../assets/userPhoto/comments/" . $kindPlaceId)) {                mkdir(__DIR__ . "/../../../../assets/userPhoto/comments/" . $kindPlaceId, 0777, true);            }            $file = $_FILES["photo"];            $targetFile = __DIR__ . "/../../../../assets/userPhoto/comments/" . $kindPlaceId . "/" . $file["name"];            $fileName = $file["name"];            if (file_exists($targetFile)) {                $count = 2;                $targetFile = __DIR__ . "/../../../../assets/userPhoto/comments/" . $kindPlaceId . "/" . $count . $file["name"];                $fileName = $count . $file["name"];                while (file_exists($targetFile)) {                    $count++;                    $targetFile = __DIR__ . "/../../../../assets/userPhoto/comments/" . $kindPlaceId . "/" . $count . $file["name"];                    $fileName = $count . $file["name"];                }            }            $err = uploadCheck($targetFile, "photo", "افزودن تصویر", 3000000, "jpg");            if (empty($err)) {                $err = upload($targetFile, "photo", "افزودن تصویر");            }            if (empty($err)) {                $allow = true;                if ($log->pic == "")                    $allow = false;                $oldFileName = __DIR__ . "/../../../../assets/userPhoto/comments/" . $kindPlaceId . "/" . $log->pic;                $log->confirm = 0;                $log->pic = $fileName;                try {                    if ($allow && file_exists($oldFileName))                        unlink($oldFileName);                    $log->save();                    return Redirect::to(route('review', ['placeId' => $placeId, 'kindPlaceId' => $kindPlaceId, 'mode' => 'success']));                } catch (Exception $e) {                };            }        }        if (empty($err)) {            $err = 'لطفا تصویر مورد نظر خود را انتخاب نمایید';        }        return $this->writeReview($placeId, $kindPlaceId, $err);    }    public function deleteUserPicFromComment()    {        if (isset($_POST["placeId"]) && isset($_POST["kindPlaceId"])) {            $kindPlaceId = makeValidInput($_POST["kindPlaceId"]);            $condition = ['visitorId' => Auth::user()->id, 'placeId' => makeValidInput($_POST["placeId"]),                'kindPlaceId' => $kindPlaceId,                'activityId' => Activity::whereName('نظر')->first()->id];            $log = LogModel::where($condition)->first();            if ($log != null) {                $target = __DIR__ . "/../../../../assets/userPhoto/comments/" . $kindPlaceId . '/' . $log->pic;                if (file_exists($target))                    unlink($target);                $log->pic = "";                $log->save();                echo "ok";                return;            }        }        echo "nok";    }    public function getPhotoFilter()    {        if (isset($_POST["kindPlaceId"])) {            echo json_encode(PicItem::where('kindPlaceId', '=', makeValidInput($_POST["kindPlaceId"]))->get());        }    }    public function getAmakenListElems($city, $mode)    {        if (isset($_POST["pageNum"]))            $currPage = makeValidInput($_POST["pageNum"]);        else {            echo \GuzzleHttp\json_encode([]);            return;        }        $sort = "rate";        if (isset($_POST["sort"]))            $sort = makeValidInput($_POST["sort"]);        $activityId = Activity::whereName('نظر')->first()->id;        $rateActivityId = Activity::whereName('امتیاز')->first()->id;        $kindPlaceId = Place::whereName('اماکن')->first()->id;        $z = "";        if (isset($_POST['color'])) {            $name = $_POST['color'];            $i = 0;            $y = count($name);            $x = "";            while ($i < $y) {                $t = $name[$i];                $x = $x . '`' . $t . '`=1 AND ';                $i++;            }            $n = strlen($x);            $z = substr($x, 0, $n - 4);        }        if (empty($z))            $z = "1 = 1";        $z .= " and ";        if ($mode == "city") {            $city = Cities::whereName($city)->first();            if ($city == null)                return "نتیجه ای یافت نشد";            if ($sort == "review")                $hotels = DB::select("Select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1, COUNT(*) as matches from amaken, log, activity WHERE " . $z . " cityId = " . $city->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));            elseif ($sort == "rate")                $hotels = DB::select("Select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1, AVG(userOpinions.rate) as avgRate from amaken, log, activity, userOpinions WHERE " . $z . " cityId = " . $city->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));            else                $hotels = DB::select("Select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1 from amaken WHERE " . $z . " cityId = " . $city->id . " ORDER by amaken.name ASC limit 4 offset " . (($currPage - 1) * 4));            $reminder = 4 - count($hotels);            if ($reminder > 0) {                if ($sort == "review")                    $hotels = array_merge($hotels, DB::select("select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1 from amaken where " . $z . " not exists (Select * from log WHERE " . $z . " cityId = " . $city->id . " and log.activityId = " . $activityId . " and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                elseif ($sort == "rate")                    $hotels = array_merge($hotels, DB::select("select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1 from amaken where " . $z . " not exists(Select * from log, userOpinions WHERE " . $z . " cityId = " . $city->id . " and log.activityId = " . $rateActivityId . " and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));            }        } else {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";            if ($sort == "review")                $hotels = DB::select("Select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1, COUNT(*) as matches from amaken, cities, state, log, activity WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));            elseif ($sort == "rate")                $hotels = DB::select("Select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1, AVG(userOpinions.rate) as avgRate from amaken, cities, state, log, activity, userOpinions WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));            else                $hotels = DB::select("Select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1 from amaken, cities, state WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " ORDER by amaken.name ASC limit 4 offset " . (($currPage - 1) * 4));            $reminder = 4 - count($hotels);            if ($reminder > 0) {                if ($sort == "review")                    $hotels = array_merge($hotels, DB::select("select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1 from amaken, cities, state where " . $z . " not exists(Select * from log WHERE " . $z . " cityId = cities.id and stateId = " . $state->id . " and log.activityId = " . $activityId . " and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                elseif ($sort == "rate")                    $hotels = array_merge($hotels, DB::select("select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1 from amaken, cities, state where " . $z . " not exists(Select * from log, userOpinions WHERE " . $z . " cityId = cities.id and stateId = " . $state->id . " and log.activityId = " . $rateActivityId . " and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));            }        }        foreach ($hotels as $hotel) {            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $hotel->file . '/f-1.jpg')))                $hotel->pic = URL::asset('_images/amaken/' . $hotel->file . '/f-1.jpg');            else                $hotel->pic = URL::asset('_images/nopic/blank.jpg');            $condition = ['placeId' => $hotel->id, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $hotel->reviews = LogModel::where($condition)->count();            $cityObj = Cities::whereId($hotel->cityId);            $hotel->city = $cityObj->name;            $hotel->state = State::whereId($cityObj->stateId)->name;            $hotel->avgRate = getRate($hotel->id, $kindPlaceId)[1];        }        if ($sort == "rate") {            usort($hotels, function ($a, $b) {                return $b->avgRate - $a->avgRate;            });        }        echo \GuzzleHttp\json_encode(['places' => $hotels]);    }    public function showAmakenList($city, $mode) {        if ($mode == "state") {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";        } else {            $tmp = Cities::whereName($city)->first();            if ($tmp == null)                return "نتیجه ای یافت نشد";            $state = State::whereId($tmp->stateId);            if ($state == null)                return "نتیجه ای یافت نشد";        }        return view('hotel-list', array('mode' => $mode, 'placeMode' => 'amaken', 'city' => $city, 'state' => $state,            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function getRestaurantListElems($city, $mode)    {        if (isset($_POST["pageNum"]))            $currPage = makeValidInput($_POST["pageNum"]);        else {            echo \GuzzleHttp\json_encode([]);            return;        }        $sort = "rate";        if (isset($_POST["sort"]))            $sort = makeValidInput($_POST["sort"]);        $activityId = Activity::whereName('نظر')->first()->id;        $rateActivityId = Activity::whereName('امتیاز')->first()->id;        $kindPlaceId = Place::whereName('رستوران')->first()->id;        $z = "";        if (isset($_POST["kind_id"])) {            $name = $_POST["kind_id"];            $i = 0;            $y = count($name);            $allow = false;            $first = true;            $x = "(";            while ($i < $y) {                $t = makeValidInput($name[$i]);                if ($t == -1)                    $allow = true;                if (!$allow) {                    if ($first) {                        $x .= '`kind_id` = ' . $t;                        $first = false;                    } else {                        $x .= ' OR `kind_id` = ' . $t;                    }                }                $i++;            }            $n = strlen($x);            if ($n > 5 && !$allow)                $z .= substr($x, 0, $n - 4) . ')';        }        if (empty($z))            $z = " 1 = 1 ";        $z .= " and ";        if (isset($_POST['color'])) {            $name = $_POST['color'];            $i = 0;            $y = count($name);            $x = "";            while ($i < $y) {                $t = $name[$i];                $x = $x . '`' . $t . '`=1 AND ';                $i++;            }            $n = strlen($x);            $z .= substr($x, 0, $n - 4);        }        if (empty($z))            $z = "1 = 1";        if ($mode == "city") {            $city = Cities::whereName($city)->first();            if ($city == null)                return "نتیجه ای یافت نشد";            if ($sort == "review")                $hotels = DB::select("Select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1, COUNT(*) as matches from restaurant, log, activity WHERE " . $z . " cityId = " . $city->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));            elseif ($sort == "rate")                $hotels = DB::select("Select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1, AVG(userOpinions.rate) as avgRate from restaurant, log, activity, userOpinions WHERE " . $z . " cityId = " . $city->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));            else                $hotels = DB::select("Select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1 from restaurant WHERE " . $z . " cityId = " . $city->id . " ORDER by restaurant.name ASC limit 4 offset " . (($currPage - 1) * 4));            $reminder = 4 - count($hotels);            if ($reminder > 0) {                if ($sort == "review")                    $hotels = array_merge($hotels, DB::select("select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1 from restaurant where " . $z . " not exists(Select * from log WHERE " . $z . " cityId = " . $city->id . " and log.activityId = " . $activityId . " and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                else if ($sort == "rate")                    $hotels = array_merge($hotels, DB::select("select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1 from restaurant where " . $z . " not exists(Select * from log, userOpinions WHERE " . $z . " cityId = " . $city->id . " and log.activityId = " . $rateActivityId . " and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));            }        } else {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";            if ($sort == "review")                $hotels = DB::select("Select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1, COUNT(*) as matches from restaurant, cities, state, log, activity WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));            elseif ($sort == "rate")                $hotels = DB::select("Select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1, AVG(userOpinions.rate) as avgRate from restaurant, cities, state, log, activity, userOpinions WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));            else                $hotels = DB::select("Select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1 from restaurant, cities, state WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " ORDER by restaurant.name ASC limit 4 offset " . (($currPage - 1) * 4));            $reminder = 4 - count($hotels);            if ($reminder > 0) {                if ($sort == "review")                    $hotels = array_merge($hotels, DB::select("select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1 from restaurant, cities, state where " . $z . " not exists(Select * from log WHERE " . $z . " cityId = cities.id and stateId = " . $state->id . " and log.activityId = " . $activityId . " and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                else if ($sort == "rate")                    $hotels = array_merge($hotels, DB::select("select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1 from restaurant, cities, state where " . $z . " not exists(Select * from log, userOpinions WHERE " . $z . " cityId = cities.id and stateId = " . $state->id . " and log.activityId = " . $rateActivityId . " and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));            }        }        foreach ($hotels as $hotel) {            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $hotel->file . '/f-1.jpg')))                $hotel->pic = URL::asset('_images/restaurant/' . $hotel->file . '/f-1.jpg');            else                $hotel->pic = URL::asset('_images/nopic/blank.jpg');            $condition = ['placeId' => $hotel->id, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $hotel->reviews = LogModel::where($condition)->count();            $cityObj = Cities::whereId($hotel->cityId);            $hotel->city = $cityObj->name;            $hotel->state = State::whereId($cityObj->stateId)->name;            $hotel->avgRate = getRate($hotel->id, $kindPlaceId)[1];        }        if ($sort == "rate") {            usort($hotels, function ($a, $b) {                return $b->avgRate - $a->avgRate;            });        }        echo \GuzzleHttp\json_encode(['places' => $hotels]);    }    public function showRestaurantList($city, $mode) {        if ($mode == "state") {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";        } else {            $tmp = Cities::whereName($city)->first();            if ($tmp == null)                return "نتیجه ای یافت نشد";            $state = State::whereId($tmp->stateId);            if ($state == null)                return "نتیجه ای یافت نشد";        }        return view('hotel-list', array('mode' => $mode, 'placeMode' => 'restaurant', 'city' => $city, 'state' => $state,            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function showHotelList($city, $mode) {        session()->forget(['goDate', 'backDate', 'room', 'adult', 'children', 'ageOfChild', 'reserve_room']);        if ($mode == "state") {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";        } else {            $tmp = Cities::whereName($city)->first();            if ($tmp == null)                return "نتیجه ای یافت نشد";            $state = State::whereId($tmp->stateId);            if ($state == null)                return "نتیجه ای یافت نشد";        }        return view('hotel-list', array('mode' => $mode, 'placeMode' => 'hotel', 'city' => $city, 'state' => $state,            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function getLastRecentlyMain()    {        $activityId = Activity::whereName('نظر')->first()->id;        $seenActivityId = Activity::whereName('مشاهده')->first()->id;        if (Auth::check()) {            $uId = Auth::user()->id;            $condition = ['visitorId' => $uId, 'activityId' => $seenActivityId];            $place2 = LogModel::where($condition)->orderBy('date', 'DESC')->take(4)->get();            for ($i = 0; $i < count($place2); $i++) {                $kindPlaceIdTmp = $place2[$i]->kindPlaceId;                switch ($kindPlaceIdTmp) {                    case 1:                    default:                        $tmp = Amaken::whereId($place2[$i]->placeId);                        if ($tmp == null) {                            $place2[$i]->delete();                            continue;                        }                        $place2[$i] = $tmp;                        if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $place2[$i]->file . '/f-1.jpg')))                            $place2[$i]->pic = URL::asset('_images/amaken/' . $place2[$i]->file . '/f-1.jpg');                        else                            $place2[$i]->pic = URL::asset('_images/nopic/blank.jpg');                        $place2[$i]->url = route('amakenDetails', ['placeId' => $place2[$i]->id, 'placeName' => $place2[$i]->name]);                        break;                    case 3:                        $tmp = Restaurant::whereId($place2[$i]->placeId);                        if ($tmp == null) {                            $place2[$i]->delete();                            continue;                        }                        $place2[$i] = $tmp;                        if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $place2[$i]->file . '/f-1.jpg')))                            $place2[$i]->pic = URL::asset('_images/restaurant/' . $place2[$i]->file . '/f-1.jpg');                        else                            $place2[$i]->pic = URL::asset('_images/nopic/blank.jpg');                        $place2[$i]->url = route('restaurantDetails', ['placeId' => $place2[$i]->id, 'placeName' => $place2[$i]->name]);                        break;                    case 4:                        $tmp = Hotel::whereId($place2[$i]->placeId);                        if ($tmp == null) {                            $place2[$i]->delete();                            continue;                        }                        $place2[$i] = $tmp;                        if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place2[$i]->file . '/f-1.jpg')))                            $place2[$i]->pic = URL::asset('_images/hotels/' . $place2[$i]->file . '/f-1.jpg');                        else                            $place2[$i]->pic = URL::asset('_images/nopic/blank.jpg');                        $place2[$i]->url = route('hotelDetails', ['placeId' => $place2[$i]->id, 'placeName' => $place2[$i]->name]);                        break;                    case 6:                        $tmp = Majara::whereId($place2[$i]->placeId);                        if ($tmp == null) {                            $place2[$i]->delete();                            continue;                        }                        $place2[$i] = $tmp;                        if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $place2[$i]->file . '/f-1.jpg')))                            $place2[$i]->pic = URL::asset('_images/majara/' . $place2[$i]->file . '/f-1.jpg');                        else                            $place2[$i]->pic = URL::asset('_images/nopic/blank.jpg');                        $place2[$i]->url = route('majaraDetails', ['placeId' => $place2[$i]->id, 'placeName' => $place2[$i]->name]);                        break;                    case 8:                        $tmp = Adab::whereId($place2[$i]->placeId);                        if ($tmp == null) {                            $place2[$i]->delete();                            continue;                        }                        $place2[$i] = $tmp;                        if ($place2[$i]->category == 3) {                            if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $place2[$i]->file . '/f-1.jpg')))                                $place2[$i]->pic = URL::asset('_images/adab/ghazamahali/' . $place2[$i]->file . '/f-1.jpg');                            else                                $place2[$i]->pic = URL::asset('_images/nopic/blank.jpg');                        } else {                            if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $place2[$i]->file . '/f-1.jpg')))                                $place2[$i]->pic = URL::asset('_images/adab/soghat/' . $place2[$i]->file . '/f-1.jpg');                            else                                $place2[$i]->pic = URL::asset('_images/nopic/blank.jpg');                        }                        $place2[$i]->url = route('majaraDetails', ['placeId' => $place2[$i]->id, 'placeName' => $place2[$i]->name]);                        break;                }                if ($tmp == null || $place2[$i] == null) {                    $place2[$i] = null;                    continue;                }                $place2[$i]->rate = getRate($place2[$i]->id, $kindPlaceIdTmp)[1];                $condition = ['placeId' => $place2[$i]->id, 'kindPlaceId' => $kindPlaceIdTmp,                    'confirm' => 1, 'activityId' => $activityId];                $place2[$i]->reviews = LogModel::where($condition)->count();                $place2[$i]->kindPlaceId = $kindPlaceIdTmp;            }            foreach ($place2 as $itr) {                if ($itr == null) {                    $itr = null;                    continue;                }                $itr->present = true;                if ($itr->kindPlaceId != 8) {                    $city = Cities::whereId($itr->cityId);                    if ($city == null) {                        $itr->present = false;                        continue;                    }                    $itr->city = $city->name;                    $itr->state = State::whereId($city->stateId)->name;                } else {                    $city = State::whereId($itr->stateId);                    if ($city == null) {                        $itr = null;                        continue;                    }                    $itr->state = $itr->city = $city->name;                }            }            echo json_encode($place2);        }    }    public function getAdviceMain() {        if (Cache::has('suggestedPlaces')) {            echo \GuzzleHttp\json_encode(Cache::get('suggestedPlaces'));            return;        }        $activityId = Activity::whereName('نظر')->first()->id;        $places = SpecialAdvice::all();        for ($i = 0; $i < count($places); $i++) {            $kindPlaceIdTmp = $places[$i]->kindPlaceId;            switch ($kindPlaceIdTmp) {                case 1:                default:                    $places[$i] = Amaken::whereId($places[$i]->placeId);                    if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $places[$i]->file . '/f-1.jpg')))                        $places[$i]->pic = URL::asset('_images/amaken/' . $places[$i]->file . '/f-1.jpg');                    else                        $places[$i]->pic = URL::asset('_images/nopic/blank.jpg');                    $places[$i]->url = route('amakenDetails', ['placeId' => $places[$i]->id, 'placeName' => $places[$i]->name]);                    break;                case 3:                    $places[$i] = Restaurant::whereId($places[$i]->placeId);                    if (file_exists(__DIR__ . '/../../../public/restaurant/' . $places[$i]->file . '/f-1.jpg'))                        $places[$i]->pic = URL::asset('_images/restaurant/' . $places[$i]->file . '/f-1.jpg');                    else                        $places[$i]->pic = URL::asset('_images/nopic/blank.jpg');                    $places[$i]->url = route('restaurantDetails', ['placeId' => $places[$i]->id, 'placeName' => $places[$i]->name]);                    break;                case 4:                    $places[$i] = Hotel::whereId($places[$i]->placeId);                    if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $places[$i]->file . '/f-1.jpg')))                        $places[$i]->pic = URL::asset('_images/hotels/' . $places[$i]->file . '/f-1.jpg');                    else                        $places[$i]->pic = URL::asset('_images/nopic/blank.jpg');                    $places[$i]->url = route('hotelDetails', ['placeId' => $places[$i]->id, 'placeName' => $places[$i]->name]);                    break;            }            $places[$i]->rate = getRate($places[$i]->id, $kindPlaceIdTmp)[1];            $condition = ['placeId' => $places[$i]->id, 'kindPlaceId' => $kindPlaceIdTmp,                'confirm' => 1, 'activityId' => $activityId];            $places[$i]->reviews = LogModel::where($condition)->count();        }        foreach ($places as $itr) {            if ($itr == null) {                $itr = null;                continue;            }            $itr->present = true;            if ($itr->kindPlaceId != 8) {                $city = Cities::whereId($itr->cityId);                if ($city == null) {                    $itr->present = false;                    continue;                }                $itr->city = $city->name;                $itr->state = State::whereId($city->stateId)->name;            } else {                $city = State::whereId($itr->stateId);                if ($city == null) {                    $itr = null;                    continue;                }                $itr->state = $itr->city = $city->name;            }        }        Cache::add('suggestedPlaces', $places, 60 * 24 * 30);        echo json_encode($places);    }    public function getHotelsMain()    {        $activityId = Activity::whereName('نظر')->first()->id;        $kindPlaceId = Place::whereName('هتل')->first()->id;        $place1 = DB::select("select hotels.id, hotels.name, hotels.cityId, hotels.file, hotels.pic_1, COUNT(*) as matches from hotels, log WHERE confirm = 1 and log.activityId = " . $activityId . " and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 0, 4");        $reminder = 4 - count($place1);        $z = "(";        $first = true;        foreach ($place1 as $itr) {            if ($first)                $first = false;            else                $z .= ',';            $z .= $itr->id;        }        $z .= ')';        if (!$first)            $place1 = array_merge($place1, DB::select('select id, name, cityId, file, pic_1, 0 as matches from                   hotels WHERE id not in ' . $z . 'limit 0, ' . $reminder));        else            $place1 = array_merge($place1, DB::select('select id, name, cityId, file, pic_1, 0 as matches from                   hotels limit 0, ' . $reminder));        foreach ($place1 as $itr) {            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $itr->file . '/f-1.jpg')))                $itr->pic = URL::asset('_images/hotels/' . $itr->file . '/f-1.jpg');            else                $itr->pic = URL::asset('_images/nopic/blank.jpg');            $itr->reviews = $itr->matches;            $itr->rate = getRate($itr->id, $kindPlaceId)[1];            $itr->url = route('hotelDetails', ['placeId' => $itr->id, 'placeName' => $itr->name]);            $itr->kindPlaceId = $kindPlaceId;        }        foreach ($place1 as $itr) {            if ($itr == null) {                $itr = null;                continue;            }            $itr->present = true;            if ($itr->kindPlaceId != 8) {                $city = Cities::whereId($itr->cityId);                if ($city == null) {                    $itr->present = false;                    continue;                }                $itr->city = $city->name;                $itr->state = State::whereId($city->stateId)->name;            } else {                $city = State::whereId($itr->stateId);                if ($city == null) {                    $itr = null;                    continue;                }                $itr->state = $itr->city = $city->name;            }        }        echo json_encode($place1);    }    public function getAmakensMain()    {        $activityId = Activity::whereName('نظر')->first()->id;        $kindPlaceId = Place::whereName('اماکن')->first()->id;        $place1 = DB::select("select amaken.id, amaken.name, amaken.cityId, amaken.file, amaken.pic_1, COUNT(*) as matches from amaken, log WHERE confirm = 1 and log.activityId = " . $activityId . " and log.placeId = amaken.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 0, 4");        $reminder = 4 - count($place1);        $z = "(";        $first = true;        foreach ($place1 as $itr) {            if ($first)                $first = false;            else                $z .= ',';            $z .= $itr->id;        }        $z .= ')';        if (!$first)            $place1 = array_merge($place1, DB::select('select id, name, cityId, file, pic_1, 0 as matches from               amaken WHERE id not in ' . $z . 'limit 0, ' . $reminder));        else            $place1 = array_merge($place1, DB::select('select id, name, cityId, file, pic_1, 0 as matches from               amaken limit 0, ' . $reminder));        foreach ($place1 as $itr) {            if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $itr->file . '/f-1.jpg')))                $itr->pic = URL::asset('_images/amaken/' . $itr->file . '/f-1.jpg');            else                $itr->pic = URL::asset('_images/nopic/blank.jpg');            $itr->reviews = $itr->matches;            $itr->rate = getRate($itr->id, $kindPlaceId)[1];            $itr->url = route('amakenDetails', ['placeId' => $itr->id, 'placeName' => $itr->name]);            $itr->kindPlaceId = $kindPlaceId;        }        foreach ($place1 as $itr) {            if ($itr == null) {                $itr = null;                continue;            }            $itr->present = true;            if ($itr->kindPlaceId != 8) {                $city = Cities::whereId($itr->cityId);                if ($city == null) {                    $itr->present = false;                    continue;                }                $itr->city = $city->name;                $itr->state = State::whereId($city->stateId)->name;            } else {                $city = State::whereId($itr->stateId);                if ($city == null) {                    $itr = null;                    continue;                }                $itr->state = $itr->city = $city->name;            }        }        echo json_encode($place1);    }    public function getRestaurantsMain()    {        $activityId = Activity::whereName('نظر')->first()->id;        $kindPlaceId = Place::whereName('رستوران')->first()->id;        $place1 = DB::select("select restaurant.id, restaurant.name, restaurant.cityId, restaurant.file, restaurant.pic_1, COUNT(*) as matches from restaurant, log, activity WHERE confirm = 1 and log.activityId = " . $activityId . " and log.activityId = activity.id and log.placeId = restaurant.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 0, 4");        $reminder = 4 - count($place1);        $z = "(";        $first = true;        foreach ($place1 as $itr) {            if ($first)                $first = false;            else                $z .= ',';            $z .= $itr->id;        }        $z .= ')';        if (!$first)            $place1 = array_merge($place1, DB::select('select id, name, cityId, file, pic_1, 0 as matches from               restaurant WHERE id not in ' . $z . 'limit 0, ' . $reminder));        else            $place1 = array_merge($place1, DB::select('select id, name, cityId, file, pic_1, 0 as matches from               restaurant limit 0, ' . $reminder));        foreach ($place1 as $itr) {            if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $itr->file . '/f-1.jpg')))                $itr->pic = URL::asset('_images/restaurant/' . $itr->file . '/f-1.jpg');            else                $itr->pic = URL::asset('_images/nopic/blank.jpg');            $itr->reviews = $itr->matches;            $itr->rate = getRate($itr->id, $kindPlaceId)[1];            $itr->url = route('restaurantDetails', ['placeId' => $itr->id, 'placeName' => $itr->name]);            $itr->kindPlaceId = $kindPlaceId;        }        foreach ($place1 as $itr) {            if ($itr == null || count($itr) == 0) {                $itr = null;                continue;            }            $itr->present = true;            if ($itr->kindPlaceId != 8) {                $city = Cities::whereId($itr->cityId);                if ($city == null) {                    $itr->present = false;                    continue;                }                $itr->city = $city->name;                $itr->state = State::whereId($city->stateId)->name;            } else {                $city = State::whereId($itr->stateId);                if ($city == null) {                    $itr = null;                    continue;                }                $itr->state = $itr->city = $city->name;            }        }        echo json_encode($place1);    }    public function getFoodsMain()    {        $place4 = Adab::whereCategory(3)->take(4)->get();        $kindPlaceId = Place::whereName('آداب')->first()->id;        foreach ($place4 as $itr) {            if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $itr->file . '/f-1.jpg')))                $itr->pic = URL::asset('_images/adab/ghazamahali/' . $itr->file . '/f-1.jpg');            else                $itr->pic = URL::asset('_images/nopic/blank.jpg');            $itr->reviews = 0;            $itr->rate = getRate($itr->id, $kindPlaceId)[1];            $itr->url = route('adabDetails', ['placeId' => $itr->id, 'placeName' => $itr->name]);            $itr->city = State::whereId($itr->stateId)->name;            $itr->state = $itr->city;            $itr->kindPlaceId = $kindPlaceId;        }        foreach ($place4 as $itr) {            if ($itr == null) {                $itr = null;                continue;            }            $itr->present = true;            if ($itr->kindPlaceId != 8) {                $city = Cities::whereId($itr->cityId);                if ($city == null) {                    $itr->present = false;                    continue;                }                $itr->city = $city->name;                $itr->state = State::whereId($city->stateId)->name;            } else {                $city = State::whereId($itr->stateId);                if ($city == null) {                    $itr = null;                    continue;                }                $itr->state = $itr->city = $city->name;            }        }        echo json_encode($place4);    }    public function showMainPage($mode = "hotel") {        switch ($mode) {            case "amaken":            default:                $kindPlaceId = 1;                break;            case "restaurant":                $kindPlaceId = 3;                break;            case "hotel":                $kindPlaceId = 4;                break;            case "majara":                $kindPlaceId = 6;                break;            case "adab":                $kindPlaceId = 8;                break;        }        return view('main', array('placeMode' => $mode, 'kindPlaceId' => $kindPlaceId,            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()            ));    }    public function getAdabListElems($city, $mode)    {        if (isset($_POST["pageNum"]))            $currPage = makeValidInput($_POST["pageNum"]);        else {            echo \GuzzleHttp\json_encode([]);            return;        }        $sort = "rate";        if (isset($_POST["sort"]))            $sort = makeValidInput($_POST["sort"]);        $activityId = Activity::whereName('نظر')->first()->id;        $rateActivityId = Activity::whereName('امتیاز')->first()->id;        $kindPlaceId = Place::whereName('آداب')->first()->id;        $x = "";        switch ($mode) {            case "soghat":            default:                $x .= ' category = 1 AND ';                break;            case "sanaye":                $x .= ' category = 6 AND ';                break;            case "ghazamahali":                $x .= ' category = 3 AND ';                break;            case "":                break;        }        $n = strlen($x);        $z = substr($x, 0, $n - 4);        $state = State::whereName($city)->first();        if ($state == null)            return "نتیجه ای یافت نشد";        if (empty($z))            $z = "1 = 1";        if ($sort == "review")            $adabs = DB::select("Select adab.id, adab.category, adab.name, adab.file, adab.pic_1, COUNT(*) as matches from adab, log, activity WHERE " . $z . " and stateId = " . $state->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = adab.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));        elseif ($sort == "rate")            $adabs = DB::select("Select adab.id, adab.category, adab.name, adab.file, adab.pic_1, AVG(userOpinions.rate) as avgRate from adab, log, activity, userOpinions WHERE " . $z . " and stateId = " . $state->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = adab.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));        else            $adabs = DB::select("Select adab.id, adab.category, adab.name, adab.file, adab.pic_1 from adab WHERE " . $z . " and stateId = " . $state->id . " ORDER by adab.name ASC limit 4 offset " . (($currPage - 1) * 4));        $reminder = 4 - count($adabs);        if ($reminder > 0) {            if ($sort == "review")                $adabs = array_merge($adabs, DB::select("select adab.id, adab.category, adab.name, adab.file, adab.pic_1 from adab where " . $z . " and not exists(Select * from log WHERE " . $z . " and stateId = " . $state->id . " and log.activityId = " . $activityId . " and log.placeId = adab.id and log.kindPlaceId = " . $kindPlaceId . ") and stateId = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));            elseif ($sort == "rate")                $adabs = array_merge($adabs, DB::select("select adab.id, adab.category, adab.name, adab.file, adab.pic_1 from adab where " . $z . " and not exists(Select * from log, userOpinions WHERE " . $z . " and stateId = " . $state->id . " and log.activityId = " . $rateActivityId . " and log.placeId = adab.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and stateId = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));        }        foreach ($adabs as $adab) {            if ($adab->category == 1 || $adab->category == 6) {                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/soghat/' . $adab->file . '/f-1.jpg')))                    $adab->pic = URL::asset('_images/adab/soghat/' . $adab->file . '/f-1.jpg');                else                    $adab->pic = URL::asset('_images/nopic/blank.jpg');            } else if ($adab->category == 3) {                if (file_exists((__DIR__ . '/../../../../assets/_images/adab/ghazamahali/' . $adab->file . '/f-1.jpg')))                    $adab->pic = URL::asset('_images/adab/ghazamahali/' . $adab->file . '/f-1.jpg');                else                    $adab->pic = URL::asset('_images/nopic/blank.jpg');            }            $condition = ['placeId' => $adab->id, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $adab->reviews = LogModel::where($condition)->count();            $adab->avgRate = getRate($adab->id, $kindPlaceId)[1];        }        if ($sort == "rate") {            usort($adabs, function ($a, $b) {                return $b->avgRate - $a->avgRate;            });        }        echo \GuzzleHttp\json_encode(['places' => $adabs]);    }    public function adabList($city, $mode = "") {        return View::make('adab-list', array('selectedColor' => $mode, 'city' => $city, 'state' => State::whereName($city)->first(),            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function getMajaraListElems($city, $mode)    {        if (isset($_POST["pageNum"]))            $currPage = makeValidInput($_POST["pageNum"]);        else {            echo \GuzzleHttp\json_encode([]);            return;        }        $sort = "rate";        if (isset($_POST["sort"]))            $sort = makeValidInput($_POST["sort"]);        $activityId = Activity::whereName('نظر')->first()->id;        $rateActivityId = Activity::whereName('امتیاز')->first()->id;        $kindPlaceId = Place::whereName('ماجرا')->first()->id;        $z = "";        if (isset($_POST['color'])) {            $name = $_POST['color'];            $i = 0;            $y = count($name);            $x = "";            while ($i < $y) {                $t = $name[$i];                $x = $x . '`' . $t . '`=1 AND ';                $i++;            }            $n = strlen($x);            $z = substr($x, 0, $n - 4);        }        if (empty($z))            $z = "1 = 1";        if ($mode == "city") {            $city = Cities::whereName($city)->first();            if ($city == null)                return "نتیجه ای یافت نشد";            if ($sort == "review")                $hotels = DB::select("Select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1, COUNT(*) as matches from majara, log, activity WHERE " . $z . " and cityId = " . $city->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));            elseif ($sort == "rate")                $hotels = DB::select("Select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1, AVG(userOpinions.rate) as avgRate from majara, log, activity, userOpinions WHERE " . $z . " and cityId = " . $city->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));            else                $hotels = DB::select("Select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1 from majara WHERE " . $z . " and cityId = " . $city->id . " ORDER by majara.name ASC limit 4 offset " . (($currPage - 1) * 4));            $reminder = 4 - count($hotels);            if ($reminder > 0) {                if ($sort == "review")                    $hotels = array_merge($hotels, DB::select("select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1 from majara where " . $z . " and not exists (Select * from log WHERE " . $z . " and cityId = " . $city->id . " and log.activityId = " . $activityId . " and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                else if ($sort == "rate")                    $hotels = array_merge($hotels, DB::select("select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1 from majara where " . $z . " and not exists (Select * from log, userOpinions WHERE " . $z . " and cityId = " . $city->id . " and log.activityId = " . $rateActivityId . " and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));            }        } else {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";            if ($sort == "review")                $hotels = DB::select("Select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1, COUNT(*) as matches from majara, cities, state, log, activity WHERE " . $z . " and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));            elseif ($sort == "rate")                $hotels = DB::select("Select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1, AVG(userOpinions.rate) as avgRate from majara, cities, state, log, activity, userOpinions WHERE " . $z . " and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));            else                $hotels = DB::select("Select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1 from majara, cities, state WHERE " . $z . " and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " ORDER by majara.name ASC limit 4 offset " . (($currPage - 1) * 4));            $reminder = 4 - count($hotels);            if ($reminder > 0) {                if ($sort == "review")                    $hotels = array_merge($hotels, DB::select("select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1 from majara, cities, state where " . $z . " and not exists(Select * from log WHERE " . $z . " and cityId = cities.id and stateId  = " . $state->id . " and log.activityId = " . $activityId . " and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                else if ($sort == "rate")                    $hotels = array_merge($hotels, DB::select("select majara.id, majara.name, majara.cityId, majara.file, majara.pic_1 from majara, cities, state where " . $z . " and not exists(Select * from log, userOpinions WHERE " . $z . " and cityId = cities.id and stateId = " . $state->id . " and log.activityId = " . $rateActivityId . " and log.placeId = majara.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));            }        }        foreach ($hotels as $hotel) {            if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $hotel->file . '/f-1.jpg')))                $hotel->pic = URL::asset('_images/majara/' . $hotel->file . '/f-1.jpg');            else                $hotel->pic = URL::asset('_images/nopic/blank.jpg');            $condition = ['placeId' => $hotel->id, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $hotel->reviews = LogModel::where($condition)->count();            $cityObj = Cities::whereId($hotel->cityId);            $hotel->city = $cityObj->name;            $hotel->state = State::whereId($cityObj->stateId)->name;            $hotel->avgRate = getRate($hotel->id, $kindPlaceId)[1];        }        if ($sort == "rate") {            usort($hotels, function ($a, $b) {                return $b->avgRate - $a->avgRate;            });        }        echo \GuzzleHttp\json_encode(['places' => $hotels]);    }    public function showMajaraList($city, $mode) {        if ($mode == "state") {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";        } else {            $tmp = Cities::whereName($city)->first();            if ($tmp == null)                return "نتیجه ای یافت نشد";            $state = State::whereId($tmp->stateId);            if ($state == null)                return "نتیجه ای یافت نشد";        }        return view('majara-list', array('mode' => $mode, 'placeMode' => 'amaken', 'city' => $city, 'state' => $state,            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function fillMyDivWithAdv() {                if (isset($_POST["state"]) && isset($_POST["sectionId"])) {            $state = makeValidInput($_POST["state"]);            $sectionId = makeValidInput($_POST["sectionId"]);            $today = getToday()["date"];            if($state != -1) {                $out = DB::select("select s.*, p.pic, p.url from publicity p, section s, sectionPublicity sep, statePublicity stp WHERE " .                    "sep.publicityId = p.id and stp.publicityId = p.id and s.id = sep.sectionId and sep.sectionId = " . $sectionId . " and stp.stateId = '$state'" .                    " and p.from_ <= " . $today . ' and p.to_ >= ' . $today                );            }            else {                $out = DB::select("select s.*, p.pic, p.url from publicity p, section s, sectionPublicity sep WHERE " .                    "sep.publicityId = p.id and s.id = sep.sectionId and sep.sectionId = " . $sectionId .                    " and p.from_ <= " . $today . ' and p.to_ >= ' . $today                );            }            if($out != null && count($out) > 0) {                $out = $out[0];                $out->pic = URL::asset('ads/' . $out->pic);                $out->backgroundSize = ($out->backgroundSize) ? 'contain' : 'cover';            }            echo \GuzzleHttp\json_encode($out);        }    }    public function newPlaceForMap()    {        $hotelId = json_decode($_POST['hotelId']);        $restId = json_decode($_POST['restId']);        $majaraId = json_decode($_POST['majaraId']);        $amakenId = json_decode($_POST['amakenId']);        $swLat = makeValidInput($_POST['swLat']);        $swLng = makeValidInput($_POST['swLng']);        $neLat = makeValidInput($_POST['neLat']);        $neLng = makeValidInput($_POST['neLng']);        $C = makeValidInput($_POST['C']);        $D = makeValidInput($_POST['D']);        $D *= 3.14 / 180;        $C *= 3.14 / 180;        if ($majaraId == null) {            $majaraNull = DB::table('majara')->select('id')->latest('id')->first();            $majaraId[0] = $majaraNull->id + 1;        }        if ($hotelId == null) {            $hotelNull = DB::table('hotels')->select('id')->latest('id')->first();            $hotelId[0] = $hotelNull->id + 1;        }        if ($restId == null) {            $restNull = DB::table('restaurant')->select('id')->latest('id')->first();            $restId[0] = $restNull->id + 1;        }        if ($amakenId == null) {            $amakenNull = DB::table('amaken')->select('id')->latest('id')->first();            $amakenId[0] = $amakenNull->id + 1;        }        $nearbyHotels = DB::select("SELECT id, name, C, D, file, pic_1, alt1, address, acos(" . sin($D) . " * sin(D / 180 * 3.14) + " . cos($D) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . $C . ")) * 6371 as distance FROM hotels WHERE C between " . $swLat . " and " . $neLat . " and D between " . $swLng . " and " . $neLng . " and NOT id IN(" . implode(",", $hotelId) . ")  order by distance ASC ");        $majaras = DB::select("SELECT id, name, C, D, file, pic_1, alt1, dastresi, acos(" . sin($D) . " * sin(D / 180 * 3.14) + " . cos($D) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . $C . ")) * 6371 as distance FROM majara WHERE C between " . $swLat . " and " . $neLat . " and D between " . $swLng . " and " . $neLng . " and NOT id IN(" . implode(",", $majaraId) . ")  order by distance ASC ");        $nearbyRestaurants = DB::select("SELECT id, name, C, D, kind_id, file, address, pic_1, alt1, acos(" . sin($D) . " * sin(D / 180 * 3.14) + " . cos($D) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . ($C) . ")) * 6371 as distance FROM restaurant WHERE C between " . $swLat . " and " . $neLat . " and D between " . $swLng . " and " . $neLng . "and NOT id IN(" . implode(",", $restId) . ")  order by distance ASC ");        $nearbyAmakens = DB::select("SELECT id, name, address, mooze, tarikhi, tafrihi, tabiatgardi, markazkharid,  C, D, file, pic_1, alt1, acos(" . sin($D) . " * sin(D / 180 * 3.14) + " . cos($D) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . ($C) . ")) * 6371 as distance FROM amaken WHERE C between " . $swLat . " and " . $neLat . " and D between " . $swLng . " and " . $neLng . " and NOT id IN(" . implode(",", $amakenId) . ")   order by distance ASC ");        foreach ($nearbyHotels as $nearbyHotel) {            $condition = ['placeId' => $nearbyHotel->id, 'kindPlaceId' => 4, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $nearbyHotel->reviews = LogModel::where($condition)->count();            $nearbyHotel->distance = round($nearbyHotel->distance, 2);            $nearbyHotel->rate = getRate($nearbyHotel->id, 4)[1];        }        foreach ($majaras as $majara) {            $condition = ['placeId' => $majara->id, 'kindPlaceId' => 6, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $majara->reviews = LogModel::where($condition)->count();            $majara->distance = round($majara->distance, 2);            $majara->rate = getRate($majara->id, 6)[1];        }        $restaurantPlaceId = Place::whereName('رستوران')->first()->id;        foreach ($nearbyRestaurants as $nearbyRestaurant) {            $condition = ['placeId' => $nearbyRestaurant->id, 'kindPlaceId' => $restaurantPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $nearbyRestaurant->reviews = LogModel::where($condition)->count();            $nearbyRestaurant->distance = round($nearbyRestaurant->distance, 2);            $nearbyRestaurant->rate = getRate($nearbyRestaurant->id, $restaurantPlaceId)[1];        }        $amakenPlaceId = Place::whereName('اماکن')->first()->id;        foreach ($nearbyAmakens as $nearbyAmaken) {            $condition = ['placeId' => $nearbyAmaken->id, 'kindPlaceId' => $amakenPlaceId, 'confirm' => 1,                'activityId' => Activity::whereName('نظر')->first()->id];            $nearbyAmaken->reviews = LogModel::where($condition)->count();            $nearbyAmaken->distance = round($nearbyAmaken->distance, 2);            $nearbyAmaken->rate = getRate($nearbyAmaken->id, $amakenPlaceId)[1];        }        echo json_encode(array('hotel' => $nearbyHotels, 'rest' => $nearbyRestaurants, 'amaken' => $nearbyAmakens, 'majara' => $majaras));        return;    }    public function getPlacePicture()    {        if (!isset($_POST["kindPlaceId"]) || !isset($_POST["placeId"]))            return;        $kindPlaceId = makeValidInput($_POST['kindPlaceId']);        $placeId = makeValidInput($_POST['placeId']);        switch ($kindPlaceId) {            case 1:            default:                $tmp = Amaken::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/amaken/' . $tmp->file . "/f-1.jpg")))                    echo URL::asset("_images/amaken/" . $tmp->file . "/f-1.jpg");                else                    echo URL::asset("_images/nopic/blank.jpg");                return;            case 3:                $tmp = Restaurant::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/restaurant/' . $tmp->file . "/f-1.jpg")))                    echo URL::asset('_images/restaurant/' . $tmp->file . "/f-1.jpg");                else                    echo URL::asset('_images/nopic/blank.jpg');                return;            case 4:                $tmp = Hotel::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $tmp->file . "/f-1.jpg")))                    echo URL::asset("_images/hotels/" . $tmp->file . "/f-1.jpg");                else                    echo URL::asset("_images/nopic/blank.jpg");                return;            case 6:                $tmp = Majara::whereId($placeId);                if (file_exists((__DIR__ . '/../../../../assets/_images/majara/' . $tmp->file . "/f-1.jpg")))                    echo URL::asset("_images/majara/" . $tmp->file . "/f-1.jpg");                else                    echo URL::asset("_images/nopic/blank.jpg");                return;        }    }    public function searchPlaceHotelList2()    {        $cityId = DB::select('SELECT id FROM cities WHERE NAME ="'.request("city").'"');        $place = DB::select('SELECT * FROM amaken WHERE name LIKE "%'.request("name").'%" AND cityId = '.$cityId[0]->id);        echo json_encode($place);        return;    }    public function video360()    {        $videoSrc = '_images/movie.mp4';        return view('video360', array('videoSrc' => $videoSrc));    }    public function showHotelDetail($placeId, $placeName = "", $mode = "", $err = "") {        if (Hotel::whereId($placeId) == null)            return Redirect::route('main');        $hasLogin = true;        $kindPlaceId = Place::whereName('هتل')->first()->id;        $uId = -1;        if (Auth::check())            $uId = Auth::user()->id;        else            $hasLogin = false;        if ($hasLogin) {            $activityId = Activity::whereName('مشاهده')->first()->id;            $condition = ['visitorId' => $uId, 'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId,                'activityId' => $activityId];            $log = LogModel::where($condition)->first();            if ($log == null) {                $log = new LogModel();                $log->time = getToday()["time"];                $log->activityId = $activityId;                $log->placeId = $placeId;                $log->kindPlaceId = $kindPlaceId;                $log->visitorId = $uId;                $log->date = date('Y-m-d');                $log->save();            } else {                $log->date = date('Y-m-d');                $log->save();            }        }        $bookMark = false;        $condition = ['visitorId' => $uId, 'activityId' => Activity::whereName("نشانه گذاری")->first()->id,            'placeId' => $placeId, 'kindPlaceId' => $kindPlaceId];        if (LogModel::where($condition)->count() > 0)            $bookMark = true;        $rates = getRate($placeId, $kindPlaceId);        $save = false;        $count = DB::select("select count(*) as tripPlaceNum from trip, tripPlace WHERE tripPlace.placeId = " . $placeId . " and tripPlace.kindPlaceId = " . $kindPlaceId . " and tripPlace.tripId = trip.id and trip.uId = " . $uId);        if ($count[0]->tripPlaceNum > 0)            $save = true;        $place = Hotel::whereId($placeId);        $city = Cities::whereId($place->cityId);        $state = State::whereId($city->stateId);        $photos = [];        $sitePhotos = 1;        if (!empty($place->pic_1)) {            if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $place->file . '/s-1.jpg'))) {                $photos[count($photos)] = URL::asset('_images') . '/hotels/' . $place->file . '/s-1.jpg';                $thumbnail = URL::asset('_images') . '/hotels/' . $place->file . '/f-1.jpg';            } else {                $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');                $thumbnail = URL::asset('_images/nopic/blank.jpg');            }        } else {            $photos[count($photos)] = URL::asset('_images/nopic/blank.jpg');            $thumbnail = URL::asset('_images/nopic/blank.jpg');        }        if (!empty($place->pic_2)) {            $sitePhotos++;        }        if (!empty($place->pic_3)) {            $sitePhotos++;        }        if (!empty($place->pic_4)) {            $sitePhotos++;        }        if (!empty($place->pic_5)) {            $sitePhotos++;        }        $aksActivityId = Activity::whereName('عکس')->first()->id;        $userPhotos = 0;        $logPhoto = '';        $tmp = DB::select("select count(*) as countNum from log WHERE confirm = 1 and activityId = " . $aksActivityId . " and placeId = " . $placeId . " and kindPlaceId = " . $kindPlaceId . " and pic <> 0");        if ($tmp != null && count($tmp) > 0)            $userPhotos = $tmp[0]->countNum;        $srcCities = DB::select("select DISTINCT(src) from log, comment WHERE log.placeId = " . $placeId . ' and ' .            'kindPlaceId = ' . $kindPlaceId . ' and activityId = ' . Activity::whereName('نظر')->first()->id .            ' and logId = log.id and status = 1');        $rooms = null;        if (session('goDate') != null && $place->reserveId != null) {            session()->forget(['reserve_room']);            $goDate = jalaliToGregorian(session('goDate'));            $backDate = jalaliToGregorian(session('backDate'));            $go = $goDate[0] . '-' . $goDate[1] . '-' . $goDate[2];            $back = $backDate[0] . '-' . $backDate[1] . '-' . $backDate[2];            $access_token = $this->getAccessTokenHotel(1);            $hotelApi= HotelApi::whereId($place->reserveId);            $input = array('CheckIn' => $go,                'CheckOut' => $back,                'CityIdOrHotelId' => $hotelApi->userName,                'rph' => $hotelApi->rph,                'Nationality' => 'IR',                'Categorykey' => 'Hotel',                'IsDomestic' => true            );            $input = json_encode($input);            do{                $out_room = $this->getRoomDetails($input, $access_token);            }while($out_room == null);            if(session('room') == 0)                session('room', 1);            $passNumMin = floor(session('adult') / session('room'));            $passNumMax = ceil(session('adult') / session('room'));            $passNumMax = $passNumMax > 4 ? 4 : $passNumMax;            if ($out_room != null && $out_room->data != null) {                $room = $out_room->data->rooms;                $check = true;                $check_available = false;                $rooms = array();                $min = 0;                $minMaxPass = 0;                $max = 0;                for ($i = 0; $i < count($room); $i++) {                    if ($room[$i]->capacity->adultCount == $passNumMin ||  $room[$i]->capacity->adultCount == $passNumMax || $room[$i]->capacity->adultCount == $passNumMin-1) {                        for ($j = 0; $j < count($room[$i]->perDay); $j++) {                            if (!$room[$i]->perDay[$j]->availablity)                                $check = false;                        }                        if ($check) {                            if($room[$i]->capacity->adultCount == $passNumMax){                                if($minMaxPass = 0){                                    $maxNumPriceRoomId = $i;                                    $minMaxPass = $room[$i]->perDay[0]->price;                                }                                else if($minMaxPass > $room[$i]->perDay[0]->price){                                    $maxNumPriceRoomId = $i;                                    $minMaxPass = $room[$i]->perDay[0]->price;                                }                            }                            if($room[$i]->capacity->adultCount == $passNumMin-1){                                if ($min == 0) {                                    $place->minPrice = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                    $place->maxPrice = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                    $min = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                    $max = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                    $place->service = $room[$i]->roomService;                                    $check_available = true;                                }                                else if ($min > $room[$i]->perDay[0]->price) {                                    $place->minPrice = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                    $min = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                    $place->service = $room[$i]->roomService;                                }                                else if ($max < $room[$i]->perDay[0]->price) {                                    $place->maxPrice = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                    $max = $room[$i]->perDay[0]->price + $room[$i]->priceExtraGuest;                                }                            }                            else{                                if ($min == 0) {                                    $place->minPrice = $room[$i]->perDay[0]->price;                                    $place->maxPrice = $room[$i]->perDay[0]->price;                                    $min = $room[$i]->perDay[0]->price;                                    $max = $room[$i]->perDay[0]->price;                                    $place->service = $room[$i]->roomService;                                    $check_available = true;                                }                                else if ($min > $room[$i]->perDay[0]->price) {                                    $place->minPrice = $room[$i]->perDay[0]->price;                                    $min = $room[$i]->perDay[0]->price;                                    $place->service = $room[$i]->roomService;                                }                                else if ($max < $room[$i]->perDay[0]->price) {                                    $place->maxPrice = $room[$i]->perDay[0]->price;                                    $max = $room[$i]->perDay[0]->price;                                }                            }                            $room[$i]->provider = $hotelApi->provider;                            $room[$i]->pic = URL::asset('/_images/nopic/blank.jpg');                            array_push($rooms, $room[$i]);                        }                    }                }                if ($check_available) {                    $place->otherRoom = count($rooms);                    $place->savePercent = ceil(($place->maxPrice - $place->minPrice) * 100 / $place->maxPrice);                    $place->minPrice = dotNumber($place->minPrice);                    $place->policy = $this->getHotelInfo($hotelApi->userName, $access_token, $go, $back, $hotelApi->rph);                    $place->hotel_name = $hotelApi->userName;                    $place->rph = $hotelApi->rph;                }            }        }        $jsonRoom = json_encode($rooms);        return view('hotel-details', array('place' => $place, 'save' => $save, 'city' => $city, 'thumbnail' => $thumbnail,            'tags' => Tag::whereKindPlaceId($kindPlaceId)->get(), 'state' => $state, 'avgRate' => $rates[1],            'kindPlaceId' => $kindPlaceId, 'mode' => $mode, 'rates' => $rates[0], 'logPhoto' => $logPhoto,            'photos' => $photos, 'userPhotos' => $userPhotos, 'sitePhotos' => $sitePhotos, 'config' => ConfigModel::first(),            'hasLogin' => $hasLogin, 'bookMark' => $bookMark, 'err' => $err,            'srcCities' => $srcCities, 'placeStyles' => PlaceStyle::whereKindPlaceId($kindPlaceId)->get(),             'placeMode' => 'hotel', 'rooms' => $rooms, 'jsonRoom' => $jsonRoom,            'sections' => SectionPage::wherePage(getValueInfo('hotel-detail'))->get()));    }    public function getHotelListElems($city, $mode, $kind = "")    {        if (isset($_POST["pageNum"]))            $currPage = makeValidInput($_POST["pageNum"]);        else {            echo \GuzzleHttp\json_encode([]);            return;        }        if ($kind == 'reserve') {            $sort = "price";            if (isset($_POST["sort"]))                $sort = makeValidInput($_POST["sort"]);            $z = "1 = 1 ";            $r = 'avgRate > 0';            $kindId = array();            if (isset($_POST["kind_id"])) {                $name = $_POST["kind_id"];                $y = count($name);                $allow = false;                $x = "and ( ";                for($i = 0; $i < $y; $i++){                    if ($name[$i] == -1) {                        $kindId = [1,2,3,4,5,6,7,8];                        $allow = true;                        break;                    }                    elseif($name[$i] > 0){                        array_push($kindId, $name[$i]);                        $x .= 'kind_id = ' . $name[$i] .' OR ';                    }                }                if(!$allow){                    $x .= 'kind_id = 0 )';                    $z .= $x;                }            }            if(isset($_POST['rate']) && $_POST['rate'] != 0) {                switch ($_POST['rate']) {                    case 1:                        $r = ' avgRate >= 1';                        break;                    case 2:                        $r = ' avgRate >= 2';                        break;                    case 3:                        $r = ' avgRate >= 3';                        break;                    case 4:                        $r = ' avgRate >= 4';                        break;                    case 5:                        $r = ' avgRate >= 5';                        break;                }//                while ($i < $y) {//                    $t = makeValidInput($name[$i]);//                    if ($t == -1)//                        $allow = true;//                    if (!$allow)//                        $x .= '`kind_id` = ' . $t . ' OR ';//                    $i++;//                }//                $n = strlen($x);//                if ($n > 5 && !$allow)//                    $z .= substr($x, 0, $n - 4) . ') ';            }            $z .= " and ";            if (isset($_POST['color'])) {                $condition = array();                $name = $_POST['color'];                $i = 0;                $y = count($name);                $x = "";                while ($i < $y) {                    $t = makeValidInput($name[$i]);                    $x = $x . '`' . $t . '`=1 AND ';                    if(($t != 1 || $t != '1')) {                        $array = array($name[$i] => 1);                        $condition = array_merge($condition, $array);                    }                    $i++;                }                $n = strlen($x);                $z .= substr($x, 0, $n - 4);                $z .= ' and ';            }            $activityId = Activity::whereName('نظر')->first()->id;            $kindPlaceId = Place::whereName('هتل')->first()->id;            $placeName = '';            if ($mode == "city") {                $city = Cities::whereName($city)->first();                if ($city == null)                    return "نتیجه ای یافت نشد";                //اول در این قسمت هتل هایی که قابلیت رزور و شامل فیلتر های اولیه همچون نوع مکان(هتل ، مسافرهونه و ...) و دارایی ها(همچون حومه بودن و نوع غذا و ...) را پیدا می کنیم)                if(isset($condition))                    $MainHotel = Hotel::whereNotNull('reserveId')->where('cityId', $city->id)->whereIn('kind_id',$kindId)->where($condition)->pluck('reserveId', 'id')->toArray();                else                    $MainHotel = Hotel::whereNotNull('reserveId')->where('cityId', $city->id)->whereIn('kind_id',$kindId)->pluck('reserveId', 'id')->toArray();                //چک می کند که ایا نوع مرتب سازی براساس مکان است                $checkSort = explode('-',$sort);                if(count($checkSort) > 1){                    $place = Amaken::whereId($checkSort[1]);                    $D = $place->D;                    $C = $place->C;                    $placeName = $place->name;                    $hotels = DB::select("SELECT hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, address, hotels.pic_1, hotels.C, hotels.D, acos(" . sin($D/ 180 * 3.14) . " * sin(D / 180 * 3.14) + " . cos($D/ 180 * 3.14) . " * cos(D / 180 * 3.14) * cos(C / 180 * 3.14 - " . $C/ 180 * 3.14 . ")) * 6371 as distance FROM hotels WHERE " . $z . " cityId = " . $city->id . " and reserveId is NOT null order by distance ASC limit 4 offset " . (($currPage - 1) * 4));                }                else {                    if ($sort == "review") {                        $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, hotels.pic_1, reserveId, address, hotels.kind_id, COUNT(*) as matches from hotels, log, activity WHERE reserveId is NOT null AND " . $z . " cityId = " . $city->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and  log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));                    }//                    else//                        $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, hotels.pic_1, reserveId, address from hotels WHERE reserveId is NOT null AND  " . $z . " cityId = " . $city->id . " AND ORDER by hotels.name ASC limit 4 offset " . (($currPage - 1) * 4));                }                if ($sort == "review") {                    $reminder = 4 - count($hotels);                    if ($reminder > 0)                        $hotels = array_merge($hotels, DB::select("select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, hotels.pic_1, address from hotels where reserveId is NOT null and " . $z . " not exists (Select * from log WHERE " . $z . " cityId = " . $city->id . " and log.activityId = " . $activityId . " and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . ") and  cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                }            }            else{                $state = State::whereName($city)->first();                $citiesId = Cities::whereStateId($state->id)->pluck('id')->toArray();                if ($state == null)                    return "نتیجه ای یافت نشد";                if(isset($condition))                    $MainHotel = Hotel::whereNotNull('reserveId')->whereIn('cityId', $citiesId)->whereIn('kind_id',$kindId)->where($condition)->pluck('reserveId', 'id')->toArray();                else                    $MainHotel = Hotel::whereNotNull('reserveId')->whereIn('cityId', $citiesId)->whereIn('kind_id',$kindId)->pluck('reserveId', 'id')->toArray();                $checkSort = explode('-',$sort);                if(count($checkSort) > 1){                    $place = Amaken::whereId($checkSort[1]);                    $D = $place->D;                    $C = $place->C;                    $placeName = $place->name;                    $hotels = DB::select("SELECT hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, address, hotels.pic_1, hotels.C, hotels.D, acos(" . sin($D/ 180 * 3.14) . " * sin(hotels.D / 180 * 3.14) + " . cos($D/ 180 * 3.14) . " * cos(hotels.D / 180 * 3.14) * cos(hotels.C / 180 * 3.14 - " . $C/ 180 * 3.14 . ")) * 6371 as distance FROM hotels, cities, state WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and reserveId is NOT null order by distance ASC limit 4 offset " . (($currPage - 1) * 4));                }                else {                    if ($sort == "review") {                        $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, address, hotels.pic_1, COUNT(*) as matches from hotels, cities, state, log, activity WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and  reserveId is NOT null AND activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));                    }//                    else {//                        $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, address, hotels.pic_1 from hotels, cities, state WHERE " . $z . " cityId = cities.id and state.id = stateId and  reserveId is NOT null AND state.id = " . $state->id . " ORDER by hotels.name ASC limit 4 offset " . (($currPage - 1) * 4));//                    }                }                if ($sort == "review") {                    $reminder = 4 - count($hotels);                    if ($reminder > 0) {                        $hotels = array_merge($hotels, DB::select("select hotels.id, hotels.name, hotels.cityId, reserveId, address, hotels.file, hotels.pic_1 from hotels, cities, state where " . $z . " not exists (Select * from log WHERE " . $z . " cityId = cities.id and stateId = " . $state->id . " and  log.activityId = " . $activityId . " and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . ") and reserveId is NOT null and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                    }                }            }            if($sort == 'offer'){                $hotels = $this->getOfferHotels($MainHotel, $currPage);            }            elseif ($sort == "rate"){                $hotels = $this->getRateHotels($MainHotel, $currPage);            }            elseif ($sort == 'price') {                $hotels = $this->getPriceHotels($MainHotel, $currPage);            }            $this->getAccessTokenHotel(0);            foreach ($hotels as $hotel) {                if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $hotel->file . '/f-1.jpg')))                    $hotel->pic = URL::asset('_images/hotels/' . $hotel->file . '/f-1.jpg');                else                    $hotel->pic = URL::asset('_images/nopic/blank.jpg');                $condition = ['placeId' => $hotel->id, 'kindPlaceId' => $kindPlaceId,                    'activityId' => $activityId];                $hotel->reviews = LogModel::where($condition)->count();                $cityObj = Cities::whereId($hotel->cityId);                $hotel->city = $cityObj->name;                $hotel->state = State::whereId($cityObj->stateId)->name;                $hotel->avgRate = getRate($hotel->id, $kindPlaceId)[1];                $hotel->Rate = $hotel->avgRate;                $reserveId = explode('-', $hotel->reserveId);                $min = 0;                for($i = 0; $i < count($reserveId); $i++){                    $HMA = HotelApi::whereId($reserveId[$i]);                    if($HMA->money != null && $HMA->money != 0){                        if($min == 0)                            $min = $HMA->money;                        else if($min > $HMA->money) {                            $min = $HMA->money;                        }                    }                }                $hotel->otherRoom = count($reserveId)-1;                $hotel->savePercent = 0;                $hotel->minPrice = $min;                $hotel->money = $min;                if(isset($hotel->distance)) {                    $hotel->distance *= 1000;                    if($hotel->distance >= 1000) {                        $hotel->distance = floor($hotel->distance/100)/10;                        $hotel->distance = 'فاصله از ' . $placeName . ' حدود ' . $hotel->distance . ' کیلومتر';                    }                    else {                        $hotel->distance = floor($hotel->distance);                        $hotel->distance = 'فاصله از ' . $placeName . ' حدود ' . $hotel->distance . ' متر';                    }                }                else                    $hotel->distance = '';            }//            $goDate = jalaliToGregorian(session('goDate'));//            $backDate = jalaliToGregorian(session('backDate'));//            $go = $goDate[0] . '-' . $goDate[1] . '-' . $goDate[2];//            $back = $backDate[0] . '-' . $backDate[1] . '-' . $backDate[2];            if($sort == 'rate') {                for($i = 1; $i < count($hotels); $i++){                    for($j = 0; $j < count($hotels)-$i ; $j++){                        if($hotels[$j]->avgRate < $hotels[$j+1]->avgRate){                            $min = $hotels[$j+1];                            $hotels[$j+1] = $hotels[$j];                            $hotels[$j] = $min;                        }                    }                }            }            elseif($sort == 'price') {                for($i = 1; $i < count($hotels); $i++){                    for($j = 0; $j < count($hotels)-$i ; $j++){                        if($hotels[$j]->minPrice > $hotels[$j+1]->minPrice){                            $min = $hotels[$j+1];                            $hotels[$j+1] = $hotels[$j];                            $hotels[$j] = $min;                        }                    }                }            }            elseif($sort == 'offer'){                for($i = 1; $i < count($hotels); $i++){                    for($j = 0; $j < count($hotels)-$i ; $j++){                        if($hotels[$j]->offer < $hotels[$j+1]->offer){                            $min = $hotels[$j+1];                            $hotels[$j+1] = $hotels[$j];                            $hotels[$j] = $min;                        }                    }                }            }            foreach ($hotels as $hotel) {                $hotel->minPrice = dotNumber($hotel->minPrice);            }        }        else {            $sort = "rate";            if (isset($_POST["sort"]))                $sort = makeValidInput($_POST["sort"]);            $z = "1 = 1 ";            if (isset($_POST["kind_id"])) {                $name = $_POST["kind_id"];                $i = 0;                $y = count($name);                $allow = false;                $x = "and (";                while ($i < $y) {                    $t = makeValidInput($name[$i]);                    if ($t == -1)                        $allow = true;                    if (!$allow)                        $x .= '`kind_id` = ' . $t . ' OR ';                    $i++;                }                $n = strlen($x);                if ($n > 5 && !$allow)                    $z .= substr($x, 0, $n - 4) . ') ';            }            $z .= "and ";            $activityId = Activity::whereName('نظر')->first()->id;            $rateActivityId = Activity::whereName('امتیاز')->first()->id;            $kindPlaceId = Place::whereName('هتل')->first()->id;            if ($mode == "city") {                $city = Cities::whereName($city)->first();                if ($city == null)                    return "نتیجه ای یافت نشد";                if (isset($_POST['color'])) {                    $name = $_POST['color'];                    $i = 0;                    $y = count($name);                    $x = "";                    while ($i < $y) {                        $t = makeValidInput($name[$i]);                        $x = $x . '`' . $t . '`=1 AND ';                        $i++;                    }                    $n = strlen($x);                    $z .= substr($x, 0, $n - 4);                    $z .= ' and ';                }                if ($sort == "review")                    $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, hotels.pic_1, reserveId, address, COUNT(*) as matches from hotels, log, activity WHERE " . $z . " cityId = " . $city->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));                elseif ($sort == "rate")                    $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, hotels.pic_1,reserveId, address, AVG(userOpinions.rate) as avgRate from hotels, log, activity, userOpinions WHERE " . $z . " cityId = " . $city->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));                else                    $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, hotels.pic_1, reserveId, address from hotels WHERE " . $z . " cityId = " . $city->id . " ORDER by hotels.name ASC limit 4 offset " . (($currPage - 1) * 4));                $reminder = 4 - count($hotels);                if ($reminder > 0) {                    if ($sort == "review")                        $hotels = array_merge($hotels, DB::select("select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, hotels.pic_1, address from hotels where " . $z . " not exists (Select * from log WHERE " . $z . " cityId = " . $city->id . " and log.activityId = " . $activityId . " and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                    else if ($sort == "rate")                        $hotels = array_merge($hotels, DB::select("select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, hotels.pic_1, address from hotels where " . $z . " not exists (Select * from log, userOpinions WHERE " . $z . " cityId = " . $city->id . " and log.activityId = " . $rateActivityId . " and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = " . $city->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                }            } else {                if (isset($_POST['color'])) {                    $name = $_POST['color'];                    $i = 0;                    $y = count($name);                    $x = "";                    while ($i < $y) {                        $t = makeValidInput($name[$i]);                        $x = $x . '`' . $t . '`=1 AND ';                        $i++;                    }                    $n = strlen($x);                    $z .= substr($x, 0, $n - 4);                    $z .= ' and ';                }                $state = State::whereName($city)->first();                if ($state == null)                    return "نتیجه ای یافت نشد";                if ($sort == "review")                    $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, address, hotels.pic_1, COUNT(*) as matches from hotels, cities, state, log, activity WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $activityId . " and log.activityId = activity.id and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " GROUP BY(log.placeId) ORDER by matches limit 4 offset " . (($currPage - 1) * 4));                elseif ($sort == "rate")                    $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, address, hotels.pic_1, AVG(userOpinions.rate) as avgRate from hotels, cities, state, log, activity, userOpinions WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " and activity.id = " . $rateActivityId . " and log.activityId = activity.id and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id GROUP BY(log.placeId) HAVING avgRate > 2 ORDER by avgRate DESC limit 4 offset " . (($currPage - 1) * 4));                else                    $hotels = DB::select("Select hotels.id, hotels.name, hotels.cityId, hotels.file, reserveId, address, hotels.pic_1 from hotels, cities, state WHERE " . $z . " cityId = cities.id and state.id = stateId and state.id = " . $state->id . " ORDER by hotels.name ASC limit 4 offset " . (($currPage - 1) * 4));                $reminder = 4 - count($hotels);                if ($reminder > 0) {                    if ($sort == "review")                        $hotels = array_merge($hotels, DB::select("select hotels.id, hotels.name, hotels.cityId, reserveId, address, hotels.file, hotels.pic_1 from hotels, cities, state where " . $z . " not exists (Select * from log WHERE " . $z . " cityId = cities.id and stateId = " . $state->id . " and log.activityId = " . $activityId . " and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . ") and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                    else if ($sort == "rate") {                        $hotels = array_merge($hotels, DB::select("select hotels.id, hotels.name, hotels.cityId, reserveId, address, hotels.file, hotels.pic_1 from hotels, cities, state where " . $z . " not exists (Select * from log, userOpinions WHERE " . $z . " cityId = cities.id and stateId = " . $state->id . " and log.activityId = " . $rateActivityId . " and log.placeId = hotels.id and log.kindPlaceId = " . $kindPlaceId . " and userOpinions.logId = log.id) and cityId = cities.id and state.id = stateId and state.id = " . $state->id . " limit " . $reminder . " offset " . (($currPage - 1) * 4)));                    }                }            }            foreach ($hotels as $hotel) {                if (file_exists((__DIR__ . '/../../../../assets/_images/hotels/' . $hotel->file . '/f-1.jpg')))                    $hotel->pic = URL::asset('_images/hotels/' . $hotel->file . '/f-1.jpg');                else                    $hotel->pic = URL::asset('_images/nopic/blank.jpg');                $condition = ['placeId' => $hotel->id, 'kindPlaceId' => $kindPlaceId,                    'activityId' => $activityId];                $hotel->reviews = LogModel::where($condition)->count();                $cityObj = Cities::whereId($hotel->cityId);                $hotel->city = $cityObj->name;                $hotel->state = State::whereId($cityObj->stateId)->name;                $hotel->avgRate = getRate($hotel->id, $kindPlaceId)[1];                if ($kind == 'reserve' && $hotel->reserveId != null)                    array_push($hotel_reserve, $hotel);            }            if ($sort == "rate") {                usort($hotels, function ($a, $b) {                    return $b->avgRate - $a->avgRate;                });            }        }        echo \GuzzleHttp\json_encode(['places' => $hotels]);    }    private function getOfferHotels($MainHotel, $currPage){        $ApiHotelId = array();        $ApiHotelId2 = array();        foreach ($MainHotel as $id => $value) {            $seperate = explode('-', $value);            for ($j = 0; $j < count($seperate); $j++) {                $ApiHotelId[$seperate[$j]] = $id;                array_push($ApiHotelId2, $seperate[$j]);            }        }        $offerHotels = HotelApi::whereIn('id', $ApiHotelId2)->orderBy('offer', 'desc')->orderBy('money', 'asc')->pluck('id')->toArray();        $startPage = ($currPage - 1) * 4;        $currentId = array();        for ($i = $startPage; $i < $startPage + 4; $i++) {            if ($i < count($offerHotels))                array_push($currentId, $ApiHotelId[$offerHotels[$i]]);        }        $hotels = Hotel::whereIn('id', $currentId)->select('id', 'name', 'cityId', 'file', 'pic_1', 'reserveId', 'address')->get();        return $hotels;    }    private function getRateHotels($MainHotel, $currPage){        $kindPlaceId = Place::whereName('هتل')->first()->id;        $hotelsRate = array();        foreach ($MainHotel as $id => $reserveId) {            $rate =  getRate($id, $kindPlaceId)[1];            if(isset($_POST['rate']) && $_POST['rate'] != 0){                if($rate < $_POST['rate'])                    continue;            }            $array = array(                'id' => $id,                'rate' => $rate            );            array_push($hotelsRate, $array);        }        for($i = 1; $i < count($hotelsRate); $i++){            for($j = 0; $j < count($hotelsRate)-$i; $j++){                if($hotelsRate[$j]['rate'] < $hotelsRate[$j+1]['rate']){                    $min = $hotelsRate[$j+1];                    $hotelsRate[$j+1] = $hotelsRate[$j];                    $hotelsRate[$j] = $min;                }            }        }        $startPage = ($currPage - 1) * 4;        $currentId = array();        for ($i = $startPage; $i < $startPage + 4; $i++) {            if ($i < count($hotelsRate))                array_push($currentId, $hotelsRate[$i]['id']);        }        $hotels = Hotel::whereIn('id', $currentId)->select('id', 'name', 'cityId', 'file', 'pic_1', 'reserveId', 'address')->get();        return $hotels;    }    private function getPriceHotels($MainHotel, $currPage){        $ApiHotelId = array();        $ApiHotelId2 = array();        foreach ($MainHotel as $id => $value) {            $seperate = explode('-', $value);            $min = 0;            $minId = 0;            for ($j = 0; $j < count($seperate); $j++) {                $money = HotelApi::whereId($seperate[$j])->money;                if($j == 0) {                    $min = $money;                    $minId = $seperate[$j];                }                else{                    if($min > $money) {                        $min = $money;                        $minId = $seperate[$j];                    }                }            }            $ApiHotelId[$minId] = $id;            array_push($ApiHotelId2, $minId);        }        $minHotels = HotelApi::whereIn('id', $ApiHotelId2)->orderBy('money', 'asc')->pluck('id')->toArray();        $startPage = ($currPage - 1) * 4;        $currentId = array();        for ($i = $startPage; $i < $startPage + 4; $i++) {            if ($i < count($minHotels))                array_push($currentId, $ApiHotelId[$minHotels[$i]]);        }        $hotels = Hotel::whereIn('id', $currentId)->select('id', 'name', 'cityId', 'file', 'pic_1', 'reserveId', 'address')->get();        return $hotels;    }    public function makeSessionHotel()    {        $city = request('city');        $mode = request('mode');        session([            'goDate' => request('goDate'),            'backDate' => request('backDate'),            'adult' => request('adult'),            'room' => request('room'),            'children' => request('children'),            'ageOfChild' => request('ageOfChild')        ]);        if(request('id') != null){            return \redirect(\url('hotel-details/'.request('id') .'/'.request('name') .'/'));        }        else{            return \redirect(route('hotelList2', ['city' => $city, 'mode' => $mode]));        }    }    public function showHotelList2($city, $mode)    {        $this->getAccessTokenHotel(0);        if ($mode == "state") {            $state = State::whereName($city)->first();            if ($state == null)                return "نتیجه ای یافت نشد";            $stateName = $state->name;        } else {            $tmp = Cities::whereName($city)->first();            if ($tmp == null)                return "نتیجه ای یافت نشد";            $state = State::whereId($tmp->stateId);            if ($state == null)                return "نتیجه ای یافت نشد";            $stateName = $state->name;        }        return view('hotel-list2', array('mode' => $mode, 'placeMode' => 'hotel', 'city' => $city, 'state' => $stateName));    }    public function getAccessTokenHotel($return){        $access_token_save = saveApiInfo::whereName('access_token_ali_baba')->first();        $userName = saveApiInfo::whereName('register_ali_baba')->first();        if($userName == null)            dd('username and password not found....');        $array = array(            'username' => $userName->array['userName'],            'password' => $userName->array['password'],            'client_id' => '00000',            'grant_type' => 'password'        );        $POSTFIELDS = http_build_query($array);        if($access_token_save == null){            $curl = curl_init();            curl_setopt_array($curl, array(                CURLOPT_URL => "https://api.altrabo.com/api/v1/token",                CURLOPT_RETURNTRANSFER => true,                CURLOPT_ENCODING => "",                CURLOPT_MAXREDIRS => 10,                CURLOPT_TIMEOUT => 30,                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,                CURLOPT_CUSTOMREQUEST => "POST",                CURLOPT_POSTFIELDS => $POSTFIELDS,                CURLOPT_HTTPHEADER => array(                    "Content-Type: application/x-www-form-urlencoded",                    "Postman-Token: 30f7d799-43cc-4f98-bc59-74e794acb868",                    "cache-control: no-cache"                ),            ));            $response = curl_exec($curl);            $err = curl_error($curl);            curl_close($curl);            $newAPI = new saveApiInfo();            $newAPI->name = 'access_token_ali_baba';            $newAPI->array = $response;            $newAPI->save();            if ($err) {                dd('err  = ' . $err);            } else {                $access_token = json_decode($response)->access_token;                if($return != 1)                    $this->updateHotelDeatils($access_token);            }        }        else if($access_token_save->updated_at->addHour() < Carbon::now()) {            $curl = curl_init();            curl_setopt_array($curl, array(                CURLOPT_URL => "https://api.altrabo.com/api/v1/token",                CURLOPT_RETURNTRANSFER => true,                CURLOPT_ENCODING => "",                CURLOPT_MAXREDIRS => 10,                CURLOPT_TIMEOUT => 30,                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,                CURLOPT_CUSTOMREQUEST => "POST",                CURLOPT_POSTFIELDS => $POSTFIELDS,                CURLOPT_HTTPHEADER => array(                    "Content-Type: application/x-www-form-urlencoded",                    "Postman-Token: 30f7d799-43cc-4f98-bc59-74e794acb868",                    "cache-control: no-cache"                ),            ));            $response = curl_exec($curl);            $err = curl_error($curl);            curl_close($curl);            $newSave = saveApiInfo::whereName('access_token_ali_baba')->first();            $newSave->array = $response;            $newSave->save();            if ($err) {                dd('err  = ' . $err);            } else {                $access_token = json_decode($response)->access_token;                if($return != 1)                    $this->updateHotelDeatils($access_token);            }        }        else{            $access_token = json_decode($access_token_save->array)->access_token;        }        if($return == 1) {            return $access_token;        }    }    private function getRoomDetails($input, $access_token)    {        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => "https://api.altrabo.com/api/v1/HotelAvailable/GetRoomsOption",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => "",            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 30,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => "POST",            CURLOPT_POSTFIELDS => $input,            CURLOPT_HTTPHEADER => array(                "Content-Type: application/json",                "Postman-Token: 8e3ed865-e819-4fcc-85c2-ad26ea0d7f98",                "X-ZUMO-AUTH:" . $access_token,                "cache-control: no-cache"            ),        ));        $response = curl_exec($curl);        $err = curl_error($curl);        curl_close($curl);        if ($err) {            echo $err;        } else {            return (json_decode($response));        }    }    private function updateHotelDeatils($access_token){        $city = $this->getCityCodeApi($access_token);        for($i = 0; $i < count($city); $i++){            do{                $check = $this->getHotelCity($city[$i]->id, $access_token, $city[$i]->persinaTitle);            }while(!$check);        }        return true;    }    private function getCityCodeApi($access_token)    {        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => "https://api.altrabo.com/api/v1/HotelAvailable/AutoComplete?isDomestic=true&query=",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => "",            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 30,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => "GET",            CURLOPT_POSTFIELDS => "",            CURLOPT_HTTPHEADER => array(                "Postman-Token: 226a3dda-b179-4c96-8bee-38bb92be81c9",                "X-ZUMO-AUTH:" . $access_token,                "cache-control: no-cache"            ),        ));        $response = curl_exec($curl);        $err = curl_error($curl);        curl_close($curl);        $response = json_decode($response);        if ($err) {            echo "cURL Error #:" . $err;        } else {            $city = $response->data;        }        return $city;    }    private function getHotelCity($city_id, $access_token, $city_name){        $nowDate = date("Y-m-d");        $tomorrowDate = date("Y-m-d", strtotime("tomorrow"));        $hotel_input = array('CheckIn' => $nowDate,            'CheckOut' => $tomorrowDate,            'CityIdOrHotelId' => $city_id,            'Nationality' => 'IR',            'IsDomestic' => 'true'        );        $hotel_input = json_encode($hotel_input);        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => "https://api.altrabo.com/api/v1/HotelAvailable/Get",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => "",            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 40,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => "POST",            CURLOPT_POSTFIELDS => $hotel_input,            CURLOPT_HTTPHEADER => array(                "Content-Type: application/json",                "Postman-Token: ef3adb7f-0566-4267-b6ba-9ed839d7e91f",                "X-ZUMO-AUTH:" . $access_token,                "cache-control: no-cache"            ),        ));        $response = curl_exec($curl);        $err = curl_error($curl);        curl_close($curl);        if(json_decode($response)->data != null) {            $response = json_decode($response)->data;            for ($i = 0; $i < count($response); $i++) {                $hotel = HotelApi::whereUserName($response[$i]->userName)->first();                if ($hotel == null) {                    $newHotel = new HotelApi;                    $newHotel->name = $response[$i]->hotelName;                    $newHotel->rph = $response[$i]->rph;                    $newHotel->userName = $response[$i]->userName;                    $newHotel->facility = $response[$i]->hotelFacility;                    $newHotel->cityName = $city_name;                    $newHotel->money = $response[$i]->startPrice;                    $newHotel->provider = 'علی بابا';                    $newHotel->save();                } else {                    $hotel->money = $response[$i]->startPrice;                    $hotel->save();                }            }        }        else{            return false;        }        if ($err) {            echo "cURL Error #:" . $err;        } else {            return true;        }    }    private function getHotelInfo($hotelName, $access_token, $in, $out, $rph){        $hotel_input = array('CheckIn' => $in,            'CheckOut' => $out,            'CityIdOrHotelId' => $hotelName,            'Nationality' => 'IR',            'rph' => $rph,            'Type' => 1,            'Categorykey' => 'hotel',            'IsDomestic' => true        );        $hotel_input = json_encode($hotel_input);        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => "https://api.altrabo.com/api/v1/HotelAvailable/GetInfo",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => "",            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 40,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => "POST",            CURLOPT_POSTFIELDS => $hotel_input,            CURLOPT_HTTPHEADER => array(                "Content-Type: application/json",                "Postman-Token: 3f4ae4f0-7cf6-4a3a-a29c-598cf2d7f8ee",                "X-ZUMO-AUTH:" . $access_token,                "cache-control: no-cache"            ),        ));        $response = curl_exec($curl);        $err = curl_error($curl);        curl_close($curl);        if ($err) {            echo "cURL Error #:" . $err;        } else {            return json_decode($response)->data[0]->policy;        }    }    private function hotelReservationAPI($query)    {        $query = json_encode($query);        $access_token = $this->getAccessTokenHotel(1);        $curl = curl_init();        curl_setopt_array($curl, array(            CURLOPT_URL => "https://api.altrabo.com/api/v1/HotelReserve/Reserve",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => "",            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 60,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => "POST",            CURLOPT_POSTFIELDS => $query,            CURLOPT_HTTPHEADER => array(                "Content-Type: application/json",                "X-ZUMO-AUTH: ".$access_token            ),        ));        $response = curl_exec($curl);        $err = curl_error($curl);        curl_close($curl);        if($err)            dd($err);        return json_decode($response);    }    public function sendReserveRequest()    {        $selected_room = json_decode(session('reserve_room'));        $request = request()->all();        // this section we save passenger information        if(isset($request['savedInformation'])){            for($i = 0; $i < count($request['room_code']); $i++){            if($request['savedInformation'][$i] == 'ok'){                $passenger = HotelPassengerInfo::whereNID($request['NID'][$i])->first();                if($passenger == null){                    //this section for make date format                    //1399/1/2 go to 13990102 to save in data base                    $birthDate = $request['birthDayY'][$i] ;                    if($request['birthDayM'][$i] < 10)                        $birthDate .= '0';                    $birthDate .= $request['birthDayM'][$i];                    if($request['birthDayD'][$i] < 10)                        $birthDate .= '0';                    $birthDate .= $request['birthDayD'][$i];                    $newPassenger = new HotelPassengerInfo();                    $newPassenger->nameFa = $request['nameFa'][$i];                    $newPassenger->nameEn = $request['nameEn'][$i];                    $newPassenger->familyFa = $request['familyFa'][$i];                    $newPassenger->familyEn = $request['familyEn'][$i];                    $newPassenger->birthDay = $birthDate;                    $newPassenger->phone = $request['phoneNum'];                    $newPassenger->email = $request['email'];                    $newPassenger->NID = $request['NID'][$i];                    if($request['expireD'][$i] != null && $request['expireM'][$i] != null && $request['expireY'][$i] != null && $request['countryCode'][$i] != null ){                        //this section for make date format                        //1399/1/2 go to 13990102 to save in data base                        $expireDate = $request['expireY'][$i] ;                        if($request['expireM'][$i] < 10)                            $expireDate .= '0';                        $expireDate .= $request['expireM'][$i];                        if($request['expireD'][$i] < 10)                            $expireDate .= '0';                        $expireDate .= $request['expireD'][$i];                        $newPassenger->expire = $expireDate;                        $newPassenger->NIDType = 1;                        $newPassenger->countryCodeId = CountryCode::whereCode($request['countryCode'][$i])->first()->id;                    }                    else{                        $newPassenger->countryCodeId = 0;                        $newPassenger->NIDType = 0;                    }                    if($request['sex'][$i] == 'female')                        $newPassenger->sex = 0;                    else                        $newPassenger->sex = 1;                    if(Auth::check()){                        $newPassenger->uId = Auth::user()->id;                    }                    else{                        $newPassenger->uId = $request['user_id'];                    }                    $newPassenger->save();                }                else{                    //this section for make date format                    //1399/1/2 go to 13990102 to save in data base                    $birthDate = $request['birthDayY'][$i] ;                    if($request['birthDayM'][$i] < 10)                        $birthDate .= '0';                    $birthDate .= $request['birthDayM'][$i];                    if($request['birthDayD'][$i] < 10)                        $birthDate .= '0';                    $birthDate .= $request['birthDayD'][$i];                    $passenger->nameFa = $request['nameFa'][$i];                    $passenger->nameEn = $request['nameEn'][$i];                    $passenger->familyFa = $request['familyFa'][$i];                    $passenger->familyEn = $request['familyEn'][$i];                    $passenger->birthDay = $birthDate;                    $passenger->phone = $request['phoneNum'];                    $passenger->email = $request['email'];                    $passenger->NID = $request['NID'][$i];                    if($request['expireD'][$i] != null && $request['expireM'][$i] != null && $request['expireY'][$i] != null && $request['countryCode'][$i] != null ){                        //this section for make date format                        //1399/1/2 go to 13990102 to save in data base                        $expireDate = $request['expireY'][$i] ;                        if($request['expireM'][$i] < 10)                            $expireDate .= '0';                        $expireDate .= $request['expireM'][$i];                        if($request['expireD'][$i] < 10)                            $expireDate .= '0';                        $expireDate .= $request['expireD'][$i];                        $passenger->expire = $expireDate;                        $passenger->NIDType = 1;                        $passenger->countryCodeId = CountryCode::whereCode($request['countryCode'][$i])->first()->id;                    }                    else{                        $passenger->countryCodeId = 0;                        $passenger->NIDType = 0;                    }                    if($request['sex'][$i] == 'female')                        $passenger->sex = 0;                    else                        $passenger->sex = 1;                    $passenger->save();                }            }        }        }        if($request['newsMe'] == 'ok' || $request['informMe'] == 'ok'){            $noticHotel = NoticesHotel::whereEmail($request['email'])->first();            if($noticHotel == null){                $new_noticHotel = new NoticesHotel();                $new_noticHotel->email =$request['email'];                $new_noticHotel->phone =$request['phoneNum'];                if($request['newsMe'] == 'ok')                    $new_noticHotel->news = true;                if($request['informMe'] == 'ok')                    $new_noticHotel->importantInfo = true;                $new_noticHotel->save();            }            else{                if($request['newsMe'] == 'ok')                    $noticHotel->news = true;                if($request['informMe'] == 'ok')                    $noticHotel->importantInfo = true;                $noticHotel->save();            }        }        // this section we create body query for hotel reservation        $travelers = array();        for($i = 0; $i < count($request['room_code']); $i++){            $room_index = $request['room_code'][$i];            if($request['expireD'][$i] != null && $request['expireM'][$i] != null &&                $request['expireY'][$i] != null && $request['countryCode'][$i] != null ){                $expireDate = $request['expireY'][$i] .'/'. $request['expireM'][$i] . '/' . $request['expireD'][$i];                $expireDate = jalaliToGregorian($expireDate);                $document = array(                    'DocId' => $request['NID'][$i],                    'ExpireDate' => $expireDate[0].'-'.$expireDate[1].'-'.$expireDate[2],                    'DocType' => 'Passport',                    'DocIssuedCountry' => "IR",                    'BirthCountry' => "IR",                );            }            else{                $document = array(                    'DocId' => $request['NID'][$i],                    'ExpireDate' => null,                    'DocType' => 'NationalId',                    'DocIssuedCountry' => null,                    'BirthCountry' => null,                );            }            $personEn = array(                'GivenName' => $request['nameEn'][$i],                'Surname' => $request['familyEn'][$i],                'NamePrefix' => null,            );            $personFa = array(                'GivenName' => $request['nameFa'][$i],                'Surname' => $request['familyFa'][$i],                'NamePrefix' => null,            );            if($request['sex'][$i] == 'female')                $gender = 2;            else                $gender = 1;            $birthDate = $request['birthDayY'][$i] .'/'. $request['birthDayM'][$i] . '/' . $request['birthDayD'][$i];            $birthDate = jalaliToGregorian($birthDate);            $birthDate = $birthDate[0].'-'.$birthDate[1].'-'.$birthDate[2];            if($request['answers'][$i][3])                $infant = true;            else                $infant = false;            $airTraveler = array(                'Address' => null,                'Document' => $document,                'PersonName' => $personEn,                'PersianPersonName' => $personFa,                'BirthDate' => $birthDate,                'Telephone' => null,                'Email' => null,                'Gender' => $gender,                'AccompaniedByInfantInd' => $infant,                'PassengerType' => 1,                'TravelerRefNumber' => 0,                'FlightSequence' => 0,            );            $airTravelers = array();            array_push($airTravelers, $airTraveler);            $travelerss = array(                'RoomIndex' => $room_index,                'AirTravelers' => $airTravelers            );            array_push($travelers, $travelerss);        }        $telephone = array(            'AreaCityCode' => null,            'CountryAccessCode' => null,            'PhoneNumber' => $request['phoneNum']        );        $TravelerInfo = array(            'Travelers' => $travelers,            'Telephone' => $telephone,            'Email' => $request['email']        );        $check_in = jalaliToGregorian(session('goDate'));        $check_in = $check_in[0].'-'.$check_in[1].'-'.$check_in[2];        $check_out = jalaliToGregorian(session('backDate'));        $check_out = $check_out[0].'-'.$check_out[1].'-'.$check_out[2];        $GuestRoomInfos = array();        for($i = 0; $i < count($selected_room->num_room_code); $i++){            $guestRoomInfo = array(                'AdultCount' => $selected_room->adult_count[$i],                'ChildCount' => session('children'),                'ChildAge' => [],                'BedNumber' => $selected_room->adult_count[$i],                'RoomCount' => $selected_room->num_room_code[$i],                'RoomId' => $selected_room->room_code[$i],            );            array_push($GuestRoomInfos, $guestRoomInfo);        }        $AvailableRequest = array(            'CheckIn' => $check_in,            'CheckOut' => $check_out,            'CityIdOrHotelId' => $selected_room->hotel_name,            'Nationality' => "IR",            'Type' => 1,            'NumberOfRoom' => count($request['room_code']),            'GuestRoomInfos' => $GuestRoomInfos,            'Rph' => $selected_room->rph,            'CategoryKey' => 'hotel',            'IsDomestic' => true,        );        $query = array(            'TravelerInfo' => $TravelerInfo,            'AvailableRequest' => $AvailableRequest,            'OptionId' => null        );        $result = $this->hotelReservationAPI($query);//        for($i = 0; $i < count($selected_room->num_room_code); $i++) {//            $passenger = HotelPassengerInfo::whereNID($request['NID'][$i])->first();//            if($passenger == null){////                $birthDate = $request['birthDayY'][$i] ;//                if($request['birthDayM'][$i] < 10)//                    $birthDate .= '0';//                $birthDate .= $request['birthDayM'][$i];//                if($request['birthDayD'][$i] < 10)//                    $birthDate .= '0';//                $birthDate .= $request['birthDayD'][$i];////                $newPassenger = new HotelPassengerInfo();//                $newPassenger->nameFa = $request['nameFa'][$i];//                $newPassenger->nameEn = $request['nameEn'][$i];//                $newPassenger->familyFa = $request['familyFa'][$i];//                $newPassenger->familyEn = $request['familyEn'][$i];//                $newPassenger->birthDay = $birthDate;//                $newPassenger->phone = $request['phoneNum'];//                $newPassenger->email = $request['email'];//                $newPassenger->NID = $request['NID'][$i];////                if($request['expireD'][$i] != null && $request['expireM'][$i] != null && $request['expireY'][$i] != null && $request['countryCode'][$i] != null ){////                    $expireDate = $request['expireY'][$i] ;//                    if($request['expireM'][$i] < 10)//                        $expireDate .= '0';//                    $expireDate .= $request['expireM'][$i];//                    if($request['expireD'][$i] < 10)//                        $expireDate .= '0';//                    $expireDate .= $request['expireD'][$i];////                    $newPassenger->expire = $expireDate;//                    $newPassenger->NIDType = 0;//                    $newPassenger->countryCodeId = CountryCode::whereCode($request['countryCode'][$i])->first()->id;//                }//                else{//                    $newPassenger->countryCodeId = 0;//                }//                if($request['sex'][$i] == 'female')//                    $newPassenger->sex = 1;//                else//                    $newPassenger->sex = 0;//                $newPassenger->save();//            }//        }        if($result->response->successful) {            if(!($result->data->isFloat)){                echo 'paymentPage';            }            else {                $now = Carbon::now()->timestamp;                session(['orderId' => $result->data->orderId]);                session(['reserveRequestId' => $result->data->reserveRequestId]);                session(['expiryDateTime' => $result->data->expiryDateTime]);                $expireTime = Carbon::createFromTimeString($result->data->expiryDateTime)->timestamp;                $result->data->expiryDateTime = $expireTime - $now;                echo json_encode($result);            }        }        else{            echo json_encode($result);            return;            echo 'nok';        }        return;    }    public function GetReserveStatus(){        $curl = curl_init();        $order = array('OrderId' => session('orderId'));        $order = json_encode($order);        curl_setopt_array($curl, array(            CURLOPT_URL => "https://api.altrabo.com/api/v1/HotelReserve/GetReserveStatus",            CURLOPT_RETURNTRANSFER => true,            CURLOPT_ENCODING => "",            CURLOPT_MAXREDIRS => 10,            CURLOPT_TIMEOUT => 30,            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,            CURLOPT_CUSTOMREQUEST => "POST",            CURLOPT_POSTFIELDS => $order,            CURLOPT_HTTPHEADER => array(                "Content-Type: application/json",                "Postman-Token: 216903de-7c56-439f-97df-5f3309e38084",                "X-ZUMO-AUTH:" . $this->getAccessTokenHotel(1),                "cache-control: no-cache"            ),        ));        $response = curl_exec($curl);        $err = curl_error($curl);        curl_close($curl);        if ($err) {            echo 'nok';        } else {            $result = json_decode($response);            if(!($result->response->successful)){                echo 'nok';                return;            }            switch ($result->data->statusCode){                case 'ReserveRequest':                    echo $response;                    break;                case 'Vouchered':                    echo 'voucher';                    break;                case 'FakeReserve':                    session()->forget(['orderId', 'reserveRequestId', 'expiryDateTime', 'remain']);                    echo 'fake';                    break;                case 'WaitingForPayment':                    echo 'payment';                    break;                case 'PaymentTimeout':                    session()->forget(['orderId', 'reserveRequestId', 'expiryDateTime', 'remain']);                    echo 'timeOut';                    break;                default:                    echo json_encode($result);                    break;            };        }        return;    }    public function checkUserNameAndPassHotelReserve(){        if (isset($_POST["username"]) && isset($_POST["pass"]) && isset($_POST["rPass"])) {            $username = makeValidInput($_POST["username"]);            $pass = makeValidInput($_POST["pass"]);            $rPass = makeValidInput($_POST["rPass"]);            if (User::whereUserName($username)->count() > 0) {                echo "nok1";                return;            }            if ($pass != $rPass) {                echo "nok2";                return;            }            $user = new User();            $user->username = $username;            $user->password = Hash::make($pass);            $user->cityId = Cities::first()->id;            if(request('email') != null && request('phone') != null){                $user->email = request('email');                $user->phone = request('phone');            }            if(request('firstName') != null && request('lastName') != null){                $user->first_name = request('firstName');                $user-> last_name  = request('lastName');            }            try {                $user->save();                echo json_encode($user->id);            } catch (\Exception $x) {                dd($x);            }        }    }    public function getHotelPassengerInfo(){        $passengers = HotelPassengerInfo::whereUID(Auth::user()->id)->get();        foreach ($passengers as $passenger) {            if($passenger->countryCodeId != 0)                $passenger->countryCodeId = CountryCode::whereId($passenger->countryCodeId)->code;        }        echo json_encode($passengers);    }    public function getHotelWarning()    {        if(request('email') != null && request('city')){            $noticsHotel = NoticesHotel::whereEmail(request('email'))->first();            $cityId = Cities::whereName(request('city'))->first();            if($cityId == null){                echo 'nokCity';                return;            }            if($noticsHotel == null){                $newNotic = new NoticesHotel();                $newNotic->email = request('email');                $newNotic->getWarning = $cityId->id;                $newNotic->save();            }            else{                if($noticsHotel->getWarning == null){                    $noticsHotel->getWarning = $cityId->id;                }                else{                    $noticsHotel->getWarning = $noticsHotel->getWarning . '-' . $cityId->id;                }                $noticsHotel->save();            }            echo 'ok';            return;        }        else{            echo 'nok';            return;        }    }    public function AlibabaInfo()    {       return \view('alibaba');    }    public function saveAlibabaInfo()    {        $validator = \Validator::make(request()->all(),            ['userName' => 'required'],            ['password' => 'required']        );        if($validator->fails()){            echo 'nok';        }        else{            $array = array(                'userName' => request('userName'),                'password' => request('password'),            );            $alibaba = saveApiInfo::whereName('register_ali_baba')->first();            if($alibaba != null){                $alibaba->array = $array;                $alibaba->save();            }            else{                $new =  new saveApiInfo();                $new->name = 'register_ali_baba';                $new->array = $array;                $new->save();            }            echo 'ok';        }        return;    }}